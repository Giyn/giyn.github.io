<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giyn&#39;s Blog</title>
  
  
  <link href="http://giyn.work/atom.xml" rel="self"/>
  
  <link href="http://giyn.work/"/>
  <updated>2021-02-21T15:12:01.134Z</updated>
  <id>http://giyn.work/</id>
  
  <author>
    <name>Giyn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RMSLE 评估算法</title>
    <link href="http://giyn.work/posts/a2c51908/"/>
    <id>http://giyn.work/posts/a2c51908/</id>
    <published>2021-02-21T15:11:51.000Z</published>
    <updated>2021-02-21T15:12:01.134Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Pyppeteer 的基本使用方法</title>
    <link href="http://giyn.work/posts/e24b51bb/"/>
    <id>http://giyn.work/posts/e24b51bb/</id>
    <published>2021-01-29T06:53:08.000Z</published>
    <updated>2021-01-29T06:57:45.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Puppeteer？"><a href="#什么是-Puppeteer？" class="headerlink" title="什么是 Puppeteer？"></a>什么是 Puppeteer？</h1><p>要想知道什么是 Pyppeteer，首先应该先了解一下 Puppeteer：</p><p>Puppeteer 是 Google 基于 Node.js 开发的一个工具，拥有 Puppeteer 即可通过 JavaScript 来控制 Chrome 浏览器的一些操作，也可以用于网络爬虫上，其 API 极其完善，功能非常强大。</p><h1 id="什么是-Pyppeteer？"><a href="#什么是-Pyppeteer？" class="headerlink" title="什么是 Pyppeteer？"></a>什么是 Pyppeteer？</h1><p>Pyppeteer 是 Puppeteer 的 Python 实现，Pyppetter 基于 Chromium 浏览器通过执行一些动作来进行网页渲染，Pyppeteer 基于 Python 的新特性 async 实现，因此它也支持异步操作，效率相对于 Selenium 也有一定的提高。</p><h1 id="使用-Pyppeteer-进行页面渲染"><a href="#使用-Pyppeteer-进行页面渲染" class="headerlink" title="使用 Pyppeteer 进行页面渲染"></a>使用 Pyppeteer 进行页面渲染</h1><p><img src="https://img-blog.csdnimg.cn/20210128144413258.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><a href="https://movie.douban.com/explore#!type=movie&tag=%E7%83%AD%E9%97%A8&sort=recommend&page_limit=20&page_start=0">豆瓣电影筛选页面</a>页面是 JavaScript 渲染生成的，此处使用 Pyppeteer，模拟浏览器的操作，直接用浏览器把页面渲染出来，然后再直接获取渲染后的结果。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/explore#!type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;sort=recommend&amp;page_limit=20&amp;page_start=0'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    doc <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> page<span class="token punctuation">.</span>content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    titles_xpath <span class="token operator">=</span> <span class="token string">"//div[@class='list']/a[@class='item']/div/img/@alt"</span>    titles <span class="token operator">=</span> doc<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>titles_xpath<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'心灵奇旅'</span><span class="token punctuation">,</span> <span class="token string">'无依之地'</span><span class="token punctuation">,</span> <span class="token string">'迈阿密的一夜'</span><span class="token punctuation">,</span> <span class="token string">'捕鲸男孩'</span><span class="token punctuation">,</span> <span class="token string">'绿洲'</span><span class="token punctuation">,</span> <span class="token string">'我是大哥大 电影版'</span><span class="token punctuation">,</span> <span class="token string">'除暴'</span><span class="token punctuation">,</span> <span class="token string">'女人的碎片'</span><span class="token punctuation">,</span> <span class="token string">'波斯语课'</span><span class="token punctuation">,</span> <span class="token string">'穷途鼠的奶酪梦'</span><span class="token punctuation">,</span> <span class="token string">'一秒钟'</span><span class="token punctuation">,</span> <span class="token string">'刻在你心底的名字'</span><span class="token punctuation">,</span> <span class="token string">'神奇女侠1984'</span><span class="token punctuation">,</span> <span class="token string">'白虎'</span><span class="token punctuation">,</span> <span class="token string">'玫瑰岛的不可思议的历史'</span><span class="token punctuation">,</span> <span class="token string">'2020去死'</span><span class="token punctuation">,</span> <span class="token string">'沐浴之王'</span><span class="token punctuation">,</span> <span class="token string">'我和我的家乡'</span><span class="token punctuation">,</span> <span class="token string">'夺冠'</span><span class="token punctuation">,</span> <span class="token string">'信条'</span><span class="token punctuation">]</span></code></pre><p>具体分析如下：</p><p>使用 launch 方法新建一个 Browser 对象，相当于启动浏览器；接着 browser 调用 newPage  方法新建了一个 Page 对象，相当于浏览器新建一个选项卡，随后调用 setUserAgent 方法设置 User-Agent，然后 Page 对象调用了 goto 方法访问目标页面，相当于在浏览器中输入目标 URL，浏览器跳转到了对应页面进行加载；页面加载完成后再调用 content 方法获取当前浏览器页面的源代码，即 JavaScript 渲染后的结果；最后使用 lxml 进行解析并提取电影名称。</p><p>可以看到 Pyppeteer 的代码比 Selenium 更简洁易读，且环境配置更方便，还实现了异步爬取。</p><p>除此以外，我们还可以尝试 Pyppeteer 的其他功能：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/explore#!type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;sort=recommend&amp;page_limit=20&amp;page_start=0'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setViewport<span class="token punctuation">(</span>viewport<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4.12</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>screenshot<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'screenshot.png'</span><span class="token punctuation">)</span>    dimensions <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''() => &#123;        return &#123;            width: document.documentElement.clientWidth,            height: document.documentElement.clientHeight,            deviceScaleFactor: window.devicePixelRatio,        &#125;    &#125;'''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dimensions<span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1263</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token string">'deviceScaleFactor'</span><span class="token punctuation">:</span> <span class="token number">1.0000000149011612</span><span class="token punctuation">&#125;</span></code></pre><p>此处使用 setViewport 方法设定了浏览器窗口大小并模拟了网页截图，此外还执行了自定义的 JavaScript 以获得特定的内容。</p><p>截图如下：</p><p><img src="https://img-blog.csdnimg.cn/2021012815292040.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>最后调用 evaluate 方法执行 JavaScript 代码，其传入一个函数，返回网页的宽高、像素大小比率，最后得到一个 JSON 格式的对象。</p><h1 id="Pyppeteer-常用方法"><a href="#Pyppeteer-常用方法" class="headerlink" title="Pyppeteer 常用方法"></a>Pyppeteer 常用方法</h1><h2 id="launch"><a href="#launch" class="headerlink" title="launch"></a>launch</h2><p>使用 Pyppeteer 的第一步是调用 launch 方法来启动浏览器，首先通过<a href="https://miyakogi.github.io/pyppeteer/reference.html#pyppeteer.launcher.launch">官方文档</a>查看 launch 方法的定义：</p><pre class="language-python" data-language="python"><code class="language-python">pyppeteer<span class="token punctuation">.</span>launcher<span class="token punctuation">.</span>launch<span class="token punctuation">(</span>options<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> → pyppeteer<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>Browser</code></pre><p>launch 方法处于 launcher 模块中，参数没有在声明中特别指定，返回类型是 browser 模块中的 Browser 对象，launch 方法是 async 修饰的方法，因此调用时需要使用 await。</p><p>launch 方法的参数如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ignoreHTTPSErrors (bool)</td><td>是否要忽略 HTTPS 的错误，默认是 False。</td></tr><tr><td>headless (bool)</td><td>是否启用 Headless 模式，即无界面模式，如果 devtools 这个参数是 True 的话，那么该参数就会被设置为 False，否则为 True，即默认是开启无界面模式的。</td></tr><tr><td>executablePath (str)</td><td>可执行文件的路径，如果指定之后就不需要使用默认的 Chromium 了，可以指定为已有的 Chrome 或 Chromium。</td></tr><tr><td>slowMo (int or float)</td><td>通过传入指定的时间，可以减缓 Pyppeteer 的一些模拟操作。</td></tr><tr><td>args (List[str])</td><td>在执行过程中可以传入的额外参数。</td></tr><tr><td>ignoreDefaultArgs (bool)</td><td>不使用 Pyppeteer 的默认参数，如果使用了这个参数，那么最好通过 args 参数来设定一些参数，否则可能会出现一些意想不到的问题。这个参数相对比较危险，慎用。</td></tr><tr><td>handleSIGINT (bool)</td><td>是否响应 SIGINT 信号，也就是可以使用 Ctrl + C 来终止浏览器程序，默认是 True。</td></tr><tr><td>handleSIGTERM (bool)</td><td>是否响应 SIGTERM 信号，一般是 kill 命令，默认是 True。</td></tr><tr><td>handleSIGHUP (bool)</td><td>是否响应 SIGHUP 信号，即挂起信号，比如终端退出操作，默认是 True。</td></tr><tr><td>dumpio (bool)</td><td>是否将 Pyppeteer 的输出内容传给 process.stdout 和 process.stderr 对象，默认是 False。</td></tr><tr><td>userDataDir (str)</td><td>即用户数据文件夹，即可以保留一些个性化配置和操作记录。</td></tr><tr><td>env (dict)</td><td>环境变量，可以通过字典形式传入。</td></tr><tr><td>devtools (bool)</td><td>是否为每一个页面自动开启调试工具，默认是 False。如果这个参数设置为 True，那么 headless 参数就会无效，会被强制设置为 False。</td></tr><tr><td>logLevel  (int or str)</td><td>日志级别，默认和 root logger 对象的级别相同。</td></tr><tr><td>autoClose (bool)</td><td>当一些命令执行完之后，是否自动关闭浏览器，默认是 True。</td></tr><tr><td>loop (asyncio.AbstractEventLoop)</td><td>事件循环对象。</td></tr></tbody></table><h3 id="有头模式和调试模式"><a href="#有头模式和调试模式" class="headerlink" title="有头模式和调试模式"></a>有头模式和调试模式</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/explore#!type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;sort=recommend&amp;page_limit=20&amp;page_start=0'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token string">'devtools'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><p>使用调试模式后，每开启一个界面就会弹出一个调试窗口。</p><p><img src="https://img-blog.csdnimg.cn/20210128160045685.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20210128160049282.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="禁用页面顶端提示条"><a href="#禁用页面顶端提示条" class="headerlink" title="禁用页面顶端提示条"></a>禁用页面顶端提示条</h3><p>有头模式时可以看到页面顶端提示条：”Chrome 正受到自动测试软件的控制”，可以使用 args 参数来关闭：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/explore#!type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;sort=recommend&amp;page_limit=20&amp;page_start=0'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">]</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210128161342687.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="防止-WebDriver-检测"><a href="#防止-WebDriver-检测" class="headerlink" title="防止 WebDriver 检测"></a>防止 WebDriver 检测</h3><p>我们试着访问<a href="https://gz.meituan.com/meishi/">美团美食网</a>：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://gz.meituan.com/meishi/'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">]</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>可以看到 HTTP 状态码 为 403（403 Forbidden），即使我们设置了 User-Agent，美团依然能够检测到 WebDriver。<br><img src="https://img-blog.csdnimg.cn/20210128174301204.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>Pyppeteer 的 Page 对象有一个 evaluateOnNewDocument 方法，可以在每次加载网页的时候执行某个语句，此处执行将 WebDriver 隐藏的命令 <code>&#39;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#39;</code>：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://gz.meituan.com/meishi/'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">]</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluateOnNewDocument<span class="token punctuation">(</span><span class="token string">'function()&#123;Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如下图可以看到绕过了 WebDriver 的检测，成功访问页面并加载出美团美食内容：<br><img src="https://img-blog.csdnimg.cn/20210128180122856.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="页面大小调整"><a href="#页面大小调整" class="headerlink" title="页面大小调整"></a>页面大小调整</h3><p>上图中可发现页面大小与浏览器大小不统一，可以使用 setViewport 方法进行调整：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://gz.meituan.com/meishi/'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">]</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span>setViewport<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1530</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluateOnNewDocument<span class="token punctuation">(</span><span class="token string">'function()&#123;Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>可以看到页面大小调整为正常状态：</p><p><img src="https://img-blog.csdnimg.cn/20210128181012680.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="用户数据持久化"><a href="#用户数据持久化" class="headerlink" title="用户数据持久化"></a>用户数据持久化</h3><p>平时访问网站时关键 Cookies 已经保存到本地浏览器，因此下次登录时可以直接读取并保持登录状态，这些信息保存在用户目录下，其不仅包含浏览器的基本配置信息，还有一些 Cache、Cookies 等信息，若能在浏览器启动时读取这些信息，则可以恢复一些历史记录以及登录状态信息。</p><p>Pyppeteer 提供了实现手段，即在启动的时候设置 userDataDir：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token string">'userDataDir'</span><span class="token punctuation">:</span> <span class="token string">'./userdata'</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setViewport<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1530</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluateOnNewDocument<span class="token punctuation">(</span><span class="token string">'function()&#123;Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>第一次启动时先手动登录：</p><p><img src="https://img-blog.csdnimg.cn/20210128184314288.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>登录后相关信息会保存在用户目录下，下次登录时即可直接读取：</p><p><img src="https://img-blog.csdnimg.cn/20210128184420725.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>此后再启动，无需重新登录（除非 Cookies 过期）。</p><p><img src="https://img-blog.csdnimg.cn/2021012818422064.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h2><p>launch 方法返回的是 Browser 对象（浏览器对象），即 Browser 类的一个实例，其拥有许多用于操作浏览器的方法。</p><h3 id="无痕模式"><a href="#无痕模式" class="headerlink" title="无痕模式"></a>无痕模式</h3><p>无痕模式的好处就是环境干净，不与其他的浏览器示例共享 Cache、Cookies 等内容，其开启方式可以通过 createIncognitoBrowserContext 方法，其返回一个 context 对象，用其创建新选项卡：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://gz.meituan.com/meishi/'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token string">'userDataDir'</span><span class="token punctuation">:</span> <span class="token string">'./userdata'</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>createIncognitoBrowserContext<span class="token punctuation">(</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setViewport<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1530</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluateOnNewDocument<span class="token punctuation">(</span><span class="token string">'function()&#123;Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>访问美团后先登录：</p><p><img src="https://img-blog.csdnimg.cn/20210128230741529.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>第二次使用无痕模式访问的时候，仍然需要登录：</p><p><img src="https://img-blog.csdnimg.cn/20210128230852752.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h2><p>Page 对象即一个选项卡，对应一个页面。</p><h3 id="提取网页资源"><a href="#提取网页资源" class="headerlink" title="提取网页资源"></a>提取网页资源</h3><p>成功访问网页后，可以通过 Page 对象的 xpath 方法提取资源，并使用 getProperty 方法和 .jsonValue() 获取资源：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token string">'userDataDir'</span><span class="token punctuation">:</span> <span class="token string">'./userdata'</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setViewport<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1530</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluateOnNewDocument<span class="token punctuation">(</span><span class="token string">'function()&#123;Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'timeout'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    title_elements <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class='Card TopstoryItem TopstoryItem--old TopstoryItem-isRecommend']//a[@target='_blank']"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> element <span class="token keyword">in</span> title_elements<span class="token punctuation">:</span>        title <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> element<span class="token punctuation">.</span>getProperty<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>jsonValue<span class="token punctuation">(</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> element<span class="token punctuation">.</span>getProperty<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>jsonValue<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210129011018946.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/2021012901102753.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="获取和切换选项卡"><a href="#获取和切换选项卡" class="headerlink" title="获取和切换选项卡"></a>获取和切换选项卡</h3><p>新建选项卡使用的是 newPage 方法，下面是获取和切换操作：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launch<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span>headless<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">)</span>    pages <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>pages<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有页面</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Pages:'</span><span class="token punctuation">,</span> pages<span class="token punctuation">)</span>    page1 <span class="token operator">=</span> pages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># 等候2秒后切换选项卡</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page1<span class="token punctuation">.</span>bringToFront<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>此处调用了 newPage 方法新建了两个选项卡并访问了两个网站。若要切换选项卡，只需调用 pages 方法获取所有页面，然后选一个页面调用其 bringToFront 方法即可切换到该页面对应的选项卡。</p><h3 id="页面的前进、后退、刷新、截图、关闭功能"><a href="#页面的前进、后退、刷新、截图、关闭功能" class="headerlink" title="页面的前进、后退、刷新、截图、关闭功能"></a>页面的前进、后退、刷新、截图、关闭功能</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span>headless<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span>setUserAgent<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setExtraHTTPHeaders<span class="token punctuation">(</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluateOnNewDocument<span class="token punctuation">(</span>        <span class="token string">'function()&#123;Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">'https://www.toutiao.com/'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goBack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goForward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="输入文本、点击操作"><a href="#输入文本、点击操作" class="headerlink" title="输入文本、点击操作"></a>输入文本、点击操作</h3><p>输入文本使用 Page 对象的 type 方法：</p><ul><li><p>第一个参数为选择器；</p></li><li><p>第二个参数为所输入的内容。</p></li></ul><p>点击操作使用 Page 对象的 click 方法：</p><ul><li>第一个参数为选择器；</li><li>button：left、middle、right；</li><li>clickCount：点击次数；</li><li>delay：延迟点击（ms）。</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launch<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span>headless<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#kw'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span>  <span class="token comment"># 输入文本</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token string">'#su'</span><span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'button'</span><span class="token punctuation">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>        <span class="token string">'clickCount'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'delay'</span><span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  <span class="token comment"># 延迟点击(ms)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><p><img src="https://img-blog.csdnimg.cn/20210129142426509.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="获取源代码和-Cookies"><a href="#获取源代码和-Cookies" class="headerlink" title="获取源代码和 Cookies"></a>获取源代码和 Cookies</h3><p>Page 对象获取源代码使用 content 方法，获取 Cookies 使用 cookies 方法。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launch<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span>headless<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> page<span class="token punctuation">.</span>content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> page<span class="token punctuation">.</span>cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">412</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>script <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span> src<span class="token operator">=</span><span class="token string">"https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/js/components/guide-8759cd328f.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span> src<span class="token operator">=</span><span class="token string">"https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/js/components/qrcode-da919182da.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span> src<span class="token operator">=</span><span class="token string">"https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/js/super_load-a97cbd2188.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span> src<span class="token operator">=</span><span class="token string">"https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/js/components/tips-e2ceadd14d.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html;charset=utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge,chrome=1"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta content<span class="token operator">=</span><span class="token string">"always"</span> name<span class="token operator">=</span><span class="token string">"referrer"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"theme-color"</span> content<span class="token operator">=</span><span class="token string">"#2932e1"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"description"</span> content<span class="token operator">=</span><span class="token string">"全球最大的中文搜索引擎、致力于让网民更便捷地获取信息，找到所求。百度超过千亿的中文网页数据库，可以瞬间找到相关的搜索结果。"</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'PSTM'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'1611901664'</span><span class="token punctuation">,</span> <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'.baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'expires'</span><span class="token punctuation">:</span> <span class="token number">3759385311.821295</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">'httpOnly'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'secure'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'BIDUPSID'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'6361BE73058980E68337B0E3AAA39F48'</span><span class="token punctuation">,</span> <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'.baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'expires'</span><span class="token punctuation">:</span> <span class="token number">3759385311.821179</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'httpOnly'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'secure'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'H_PS_PSSID'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'33425_33516_33440_33259_33344_33585_26350_33544'</span><span class="token punctuation">,</span> <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'.baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'expires'</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token string">'httpOnly'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'secure'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'BAIDUID'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'6361BE73058980E68E74F842C5A4CEBB:FG=1'</span><span class="token punctuation">,</span> <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'.baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'expires'</span><span class="token punctuation">:</span> <span class="token number">1643437664.821377</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token string">'httpOnly'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'secure'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'BD_HOME'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'expires'</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'httpOnly'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'secure'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'BD_UPN'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'12314753'</span><span class="token punctuation">,</span> <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'expires'</span><span class="token punctuation">:</span> <span class="token number">1612765665</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">'httpOnly'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'secure'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'BA_HECTOR'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'8pak0l852g812l0guh1g17an10r'</span><span class="token punctuation">,</span> <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'.baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'expires'</span><span class="token punctuation">:</span> <span class="token number">1611905265</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">'httpOnly'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'secure'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><h3 id="执行-JavaScript-代码"><a href="#执行-JavaScript-代码" class="headerlink" title="执行 JavaScript 代码"></a>执行 JavaScript 代码</h3><p>使用 Page 对象的 evaluate 方法即可执行 JavaScript 代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launchfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span>headless<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setViewport<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1530</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    dimensions <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''() => &#123;        return &#123;            width: document.documentElement.clientWidth,            height: document.documentElement.clientHeight,            deviceScaleFactor: window.devicePixelRatio,        &#125;    &#125;'''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dimensions<span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">465</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">658</span><span class="token punctuation">,</span> <span class="token string">'deviceScaleFactor'</span><span class="token punctuation">:</span> <span class="token number">1.25</span><span class="token punctuation">&#125;</span></code></pre><p>除了 evaluate 方法，还有 exposeFunction、evaluateOnNewDocument、evaluateHandle 方法也可以执行 JavaScript 代码。</p><h3 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>waitForFunction</td><td>等待某个 JavaScript 方法执行完毕或返回结果</td></tr><tr><td>waitForNavigation</td><td>等待页面跳转，如果没加载出来就会报错</td></tr><tr><td>waitForRequest</td><td>等待某个特定的请求被发出</td></tr><tr><td>waitForResponse</td><td>等待某个特定的请求收到了回应</td></tr><tr><td>waitFor</td><td>通用的等待方法</td></tr><tr><td>waitForSelector</td><td>等待符合选择器的节点加载出来</td></tr><tr><td>waitForXPath</td><td>等待符合 XPath 的节点加载出来</td></tr></tbody></table><hr><p>Reference：<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1679">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1679</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是-Puppeteer？&quot;&gt;&lt;a href=&quot;#什么是-Puppeteer？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Puppeteer？&quot;&gt;&lt;/a&gt;什么是 Puppeteer？&lt;/h1&gt;&lt;p&gt;要想知道什么是 Pyppeteer，首先应该</summary>
      
    
    
    
    <category term="WebScraper" scheme="http://giyn.work/categories/WebScraper/"/>
    
    
    <category term="Python" scheme="http://giyn.work/tags/Python/"/>
    
    <category term="Pyppeteer" scheme="http://giyn.work/tags/Pyppeteer/"/>
    
  </entry>
  
  <entry>
    <title>使用 Pyppeteer 的 evaluateOnNewDocument 方法时出现 Object.defineProperty(...) is not a function 的解决方案</title>
    <link href="http://giyn.work/posts/9b4f9c18/"/>
    <id>http://giyn.work/posts/9b4f9c18/</id>
    <published>2021-01-29T03:23:52.000Z</published>
    <updated>2021-01-29T03:34:34.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h2><p>最近使用 Pyppeteer 过程中调用 evaluateOnNewDocument 方法在浏览器中执行 JavaScript 代码时出现了一个错误，关键代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluateOnNewDocument<span class="token punctuation">(</span><span class="token string">'Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)'</span><span class="token punctuation">)</span></code></pre><p>其中 JavaScript 代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>navigator<span class="token punctuation">,</span> <span class="token string">"webdriver"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>单从代码来看是没问题的，但是在 Chrome 控制台上会报如下错误：</p><p><img src="https://i.loli.net/2021/01/29/u4TchBJdALDW8I5.png" alt="d4ecde51248cc8e46ffb0589cce6241.png" loading="lazy"></p><p><code>Uncaught TypeError: Object.defineProperty(...) is not a function</code></p><p>但输入 <code>Object.defineProperty</code> 或 <code>navigator.webdriver</code> 却能正确显示：</p><p><img src="https://i.loli.net/2021/01/29/oFqnDrfmHJdy97P.png" alt="ca8c58557ed0f2e3e01ff5a08e41866.png" loading="lazy"></p><p>显示的是正确执行的结果：</p><p><img src="https://i.loli.net/2021/01/29/e5uvDmFLrajKG12.png" alt="481ba07d324fe9114fc9cf8b3f32e77.png" loading="lazy"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>最终在调试器的 Sources 面板发现了一个关键的错误：</p><p><img src="https://i.loli.net/2021/01/29/8eJEc3Ggn6lRY1P.png" alt="bb0aa487f194dce7e70286a7b184364.png" loading="lazy"></p><p><img src="https://i.loli.net/2021/01/29/1F7KvDHMQlPdiR5.png" alt="564ef5adf1dba17ae4fc8486cf31ef6.png" loading="lazy"></p><p>可以发现 <code>Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)</code> 本身就已经执行了函数，但通过查阅 evaluateOnNewDocument 方法的源代码发现其功能是重新添加一个函数而不是直接执行该代码，而我们的使用是把函数结果作为函数来执行，由于返回结果不是一个函数，因此会报 <code>Uncaught TypeError: Object.defineProperty(...) is not a function</code>。</p><p><img src="https://i.loli.net/2021/01/29/Lt2JUsxhIVSaRAG.png" alt="f69d43cbfa1f033e7898c7002b6c4e6.png" loading="lazy"></p><p>解决方案是将 evaluateOnNewDocument 方法的参数换为：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluateOnNewDocument<span class="token punctuation">(</span><span class="token string">'function()&#123;Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)&#125;'</span><span class="token punctuation">)</span></code></pre><p>即 JavaScript 代码换为：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>navigator<span class="token punctuation">,</span> <span class="token string">"webdriver"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>再次运行程序，成功解决问题：</p><p><img src="https://i.loli.net/2021/01/29/kwYOq56bAUErame.png" alt="d77bb1ba27aa74b65dba76172735c0d.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;所遇问题&quot;&gt;&lt;a href=&quot;#所遇问题&quot; class=&quot;headerlink&quot; title=&quot;所遇问题&quot;&gt;&lt;/a&gt;所遇问题&lt;/h2&gt;&lt;p&gt;最近使用 Pyppeteer 过程中调用 evaluateOnNewDocument 方法在浏览器中执行 JavaScrip</summary>
      
    
    
    
    <category term="WebScraper" scheme="http://giyn.work/categories/WebScraper/"/>
    
    
    <category term="Python" scheme="http://giyn.work/tags/Python/"/>
    
    <category term="Pyppeteer" scheme="http://giyn.work/tags/Pyppeteer/"/>
    
  </entry>
  
  <entry>
    <title>Python 内存分配与垃圾回收</title>
    <link href="http://giyn.work/posts/a13f9ad3/"/>
    <id>http://giyn.work/posts/a13f9ad3/</id>
    <published>2021-01-25T15:36:06.000Z</published>
    <updated>2021-01-26T07:02:41.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机存储器的分类"><a href="#计算机存储器的分类" class="headerlink" title="计算机存储器的分类"></a>计算机存储器的分类</h2><p>根据计算机存储器的作用，存储器可以分为主存储器、辅助存储器和缓冲存储器。</p><h2 id="内存的定义"><a href="#内存的定义" class="headerlink" title="内存的定义"></a>内存的定义</h2><p>主存储器也称主存、内存或可执行存储器，是与 CPU 直接进行信息交换的存储器，其读写速度相对较快，容量相对较小，通常用来保存进程运行时的程序和相应数据以供 CPU 使用；而辅助存储器不能与 CPU 直接进行信息交换，其读写速度相对较慢，容量相对较大。缓冲存储器常用于两个速度不同的部件之间，比如 CPU 和主存之间设置的高速缓冲存储 Cache。</p><p><img src="https://i.loli.net/2021/01/26/su5O2dUHwqPrMeT.png" alt="5d2c7de9b0c548a5bc9e1ec8dc16a17.png" loading="lazy"></p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="操作系统的内存管理"><a href="#操作系统的内存管理" class="headerlink" title="操作系统的内存管理"></a>操作系统的内存管理</h3><p>由于内存的容量有限，很难承载系统以及用户进程所需的全部信息，所以操作系统需要对内存空间进行存储管理。在操作系统层面上内存管理的实现相当复杂，其大致功能包括内存空间的划分与动态分配、回收、扩充以及存储保护、地址转换等。</p><h3 id="进程内的内存管理"><a href="#进程内的内存管理" class="headerlink" title="进程内的内存管理"></a>进程内的内存管理</h3><p>操作系统对各个进程的内存进行管理，同时我们也需要管理我们编写的程序所对应进程内的内存，从可用内存中申请内存并且具有足够内存来进行相关操作，以及在适当的时间释放内存，这些都是程序和系统能够正常运行的前提。</p><p>在 C / C++ 中需要手动的进行内存管理，如 C 语言中通过 <code>malloc</code> 和 <code>free</code> 函数来申请给定字节数的内存以及释放对应的内存。但在 Python 中无须手动进行内存的申请和释放，Python 在内部已经完成了大量涉及到内存管理的操作，包括内存分配及垃圾回收。</p><p><img src="https://i.loli.net/2021/01/26/aJGrZ7TNMqjbYHR.png" alt="b4e0af7ddafedfddfc15deb917f2642.png" loading="lazy"></p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><h4 id="内存池机制"><a href="#内存池机制" class="headerlink" title="内存池机制"></a>内存池机制</h4><p>在 Python 中，有列表、字典等常用的数据结构。如在列表中不仅可以保存其他不同类型的对象，而且可以非常方便的使用 <code>append</code>、<code>extend</code> 等方法进行动态扩充。但常用数据结构的一系列操作会造成内存的频繁分配和释放，而且像 <code>int</code>、<code>list</code> 等 Python 对象的内存分配和释放涉及到的数据量通常相对较小，因此 Python 引入了内存池机制，实现了小块内存的管理器（PyMalloc ）用于提高处理小块内存的效率，由此来避免底层中频繁的 <code>malloc</code> 和 <code>free</code> 操作对效率带来的影响。</p><h4 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h4><p>在内存分配中，Python 以 512 bytes 为界限对大内存和小内存进行划分，不超过 512 bytes 的内存申请，会通过 PyMalloc 管理器进行处理，超过 512 bytes 的内存申请，则会通过 C 中的 <code>malloc</code> 来进行处理。在管理器的内部，主要包括 <code>block</code>、<code>pool</code>、<code>arena</code> 层级， 其中 <code>block</code>是 Python 内存管理中的最小单元，一个 <code>pool</code> 中包含多个 <code>block</code>，多个 <code>pool</code> 构成一个 <code>arena</code>。 同时，由于内存池机制，Python 并不会将释放的内存立即归还操作系统。</p><h4 id="缓冲池机制"><a href="#缓冲池机制" class="headerlink" title="缓冲池机制"></a>缓冲池机制</h4><p>在内存池机制的基础上，Python 为了提高常用对象的创建和释放效率，又进一步对整数、字符串等对象建立了对象缓冲池。如对于 [-5, 256] 内的小整数，Python 已经在内部创建好了对应的小整数对象的缓冲池。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>垃圾回收是一种自动回收内存的技术，会将不再被使用的内存空间进行释放。在 CPython 中，垃圾回收主要是通过<strong>引用计数、标记清除及分代回收</strong>来完成的。使用引用计数来检测并清除不可访问的对象，并结合标记清除及分代回收来收集、定期检测及清除具有引用循环的对象。</p><p>在 CPython 之外的一些其他实现中，它们的垃圾回收机制和 CPython 通常会有所不同，比如 PyPy 或 Jython。一些依赖 CPython 中引用计数的代码在这些实现下可能会出现问题，比如在 CPython 中使用 <code>open()</code> 打开相关文件后，可以不用显式的关闭它：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>do_something_with_line<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但在其他实现中如果不显式地关闭打开的文件，则有可能会出现文件描述符耗尽的情况。此处可以使用 <code>with</code> 语句声明一个上下文管理器的方法，这样代码就不依赖于任何实现，在可移植性和通用性上更佳。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>    do_something_with_line<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>虽然垃圾回收机制隐藏在 Python 内部，但它非常重要，相比于 C 程序员手动进行内存的申请和释放（可能会造成内存泄露等相关问题），Python 的垃圾回收机制在背后完成了大量工作：</p><h3 id="Python-中的引用关系：名字、对象、引用"><a href="#Python-中的引用关系：名字、对象、引用" class="headerlink" title="Python 中的引用关系：名字、对象、引用"></a>Python 中的引用关系：名字、对象、引用</h3><p>此处先理解 Python 中名字和对象之间的引用关系：</p><p>先看看在 C 语言中有关变量声明和赋值的一段代码：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>第一行表示声明及初始化变量，即为变量创建和标记存储空间，并指定了初始值；第二行表示为变量重新赋值。整个过程可以使用下图来表明，可以看到的是，在给变量重新赋值后，相同地址上的值被修改为 2。变量名 <code>a</code> 可称为标识符，此处可以把变量理解为一块内存，把变量名理解为<strong>内存别名</strong>，声明过程把标识符和内存中某个特定的位置关联了起来，同时也确定了该位置存储的数据类型。</p><p><img src="https://i.loli.net/2021/01/26/m9TsbrWug3DQx2p.png" alt="224294513e01a00dd9052febd8aabd4.png" loading="lazy"></p><p>在 Python 中有如下代码：</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>a <span class="token operator">=</span> <span class="token number">2</span></code></pre><p>在 Python 中，此过程和 C 语言中有很大区别。在 Python 中，可以把变量名称为名字（name），把对象理解为分配的一块内存，名字和对象之间的关联关系称为引用（此种引用关系和 C 语言中的指针类似）。因此重新赋值修改的是引用关系，名字 <code>a</code> 重新关联到另外一个对象 <code>2</code> 上，而不是修改原来的对象 <code>1</code>。</p><p><img src="https://i.loli.net/2021/01/26/NPrtUsiZv7o8Mkm.png" alt="76e92c96af3bd3ef14e9f986b4e75a1.png" loading="lazy"></p><p>Python 中的名字和 C 语言中的标识符都可以理解为变量名，但在两种语言中对变量名的处理方式是不同的。C 语言中的标识符相当于内存的别称，<strong>在执行过程中会被替代</strong>；而在 Python 中，名字会参与到运行过程中，并且<strong>名字和对象的映射关系会存放在命名空间中</strong>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 以字典形式返回全局命名空间</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h3 id="引用计数（Reference-Counting）"><a href="#引用计数（Reference-Counting）" class="headerlink" title="引用计数（Reference Counting）"></a>引用计数（Reference Counting）</h3><p>引用计数是一种内存管理技术，通过对对象的引用计数进行跟踪从而实现自动的内存管理，Python 的垃圾回收便是以引用计数为主的。对象的引用计数随着程序的运行进行变动，当对象的引用计数变为零时，对应的内存便会被释放。可以通过 <code>sys.getrefcount</code> 来查看某个对象的引用计数。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>getrefcount<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果会比我们预期多1，因为a在sys.getrefcount()中作为参数也被引用了一次</span><span class="token number">2</span></code></pre><h4 id="引用计数的实现"><a href="#引用计数的实现" class="headerlink" title="引用计数的实现"></a>引用计数的实现</h4><p>在 Python 对象的实现中，每个对象中都持有一个统计引用次数的计数器，当该计数器变为 0 时，对应对象的内存空间就会被回收。源码 <a href="https://github.com/python/cpython/blob/master/Include/object.h"><code>object.h</code></a> 中的 <code>PyObject</code> 是 Python 对象系统中最基础的部分，它的一个成员便是引用计数变量 <code>ob_refcnt</code>。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_object</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 省略部分代码 */</span>    Py_ssize_t ob_refcnt<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">_typeobject</span> <span class="token operator">*</span>ob_type<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> PyObject<span class="token punctuation">;</span></code></pre><h4 id="引用计数的问题"><a href="#引用计数的问题" class="headerlink" title="引用计数的问题"></a>引用计数的问题</h4><p>引用计数在原理和实现上相对简单，并且延迟低、实时性强，对于内存的回收分布在程序的运行时，不会造成瞬时的卡顿。但引用计数占用了较多的空间（每个对象都持有一个引用计数变量 <code>ob_refcnt</code>），频繁地引用计数增减。</p><p>此外，引用计数还存在两个问题：</p><ul><li>引用计数无法处理循环引用；</li><li>引用计数是非线程安全的。</li></ul><h4 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h4><p>循环引用的例子：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Container</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">point</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>point <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token operator">>></span><span class="token operator">></span> container_one <span class="token operator">=</span> Container<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> container_two <span class="token operator">=</span> Container<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> container_one<span class="token punctuation">.</span>point<span class="token punctuation">(</span>container_two<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> container_two<span class="token punctuation">.</span>point<span class="token punctuation">(</span>container_one<span class="token punctuation">)</span></code></pre><p>此处使用 <code>objgraph</code> 来可视化上述创建的对象（<code>objgraph</code> 是一个用于定位内存泄露的工具）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在终端中进入虚拟环境</span>workon python-core-tech<span class="token comment"># 安装第三方库</span>pip <span class="token function">install</span> objgraph<span class="token comment"># objgraph库会生成可视化图片</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> graphvi<span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> objgraph<span class="token operator">>></span><span class="token operator">></span> objgraph.show_backrefs<span class="token punctuation">(</span>container_one, <span class="token assign-left variable">max_depth</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token string">"container.png"</span><span class="token punctuation">)</span>Graph written to /tmp/objgraph-o748tdfx.dot <span class="token punctuation">(</span><span class="token number">31</span> nodes<span class="token punctuation">)</span>Image generated as container.png</code></pre><p>此处截取生成图片的一部分，定位到代码中的关键字，如 <code>container_one</code>、<code>container_two</code>、<code>point</code>。</p><p><img src="https://i.loli.net/2021/01/26/HLXQJWMFpOy5rDq.png" alt="856c4af00a78648a4a85005594f63e8.png" loading="lazy"></p><p>把上图的关系简化一下得到下图，指向对象的箭头数量可以理解为对象的引用计数， <code>container_one</code>、<code>container_two</code> 的引用计数都为 2。如下图所示，<code>container_one</code>、<code>container_two</code> 之间便构成了循环引用。循环引用是一个对象直接或者间接引用自身，从而在引用关系上构成环状结构。另外，在 Python 中将能够持有其他对象引用的对象称为容器（ container ），只有容器对象才能造成循环引用。</p><p><img src="https://i.loli.net/2021/01/26/VEsnhOj2TqoNFxD.png" alt="cd25b2c7c2d44048dac687e42fbd027.png" loading="lazy"></p><p>清除掉命名空间内<code>container_one</code>、<code>container_two</code>的引用：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> container_one<span class="token keyword">del</span> container_two</code></pre><p>如下图，在上面的引用被解除后，预期中这两个对象的内存应该被回收，但这两个对象由于循环引用其引用计数仍然为 1，根据引用计数并不能对其内存进行释放。当这种循环引用的对象达到一定数量后，会造成比较严重的<strong>内存泄露</strong>问题。</p><p><img src="https://i.loli.net/2021/01/26/Iufm4gnbtBTC1EK.png" alt="8675dfe84c125b77ddc45c988dfbdd8.png" loading="lazy"></p><p>另一种常见的循环引用是一个序列对象包含自身的引用，如下例，Python 会自动将循环引用部分打印为 <code>[...]</code>，从而避免严重的无限循环。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lis<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> lis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h3 id="标记清除（Mark-and-Sweep）和分代回收（Generational）"><a href="#标记清除（Mark-and-Sweep）和分代回收（Generational）" class="headerlink" title="标记清除（Mark and Sweep）和分代回收（Generational）"></a>标记清除（Mark and Sweep）和分代回收（Generational）</h3><p>为了<strong>解决引用计数在垃圾回收中无法处理循环引用</strong>的问题，Python 引入了标记清除和分代回收来<strong>检测和打破循环引用</strong> 。标记清除是追踪回收中的一种基础算法，其涉及到两个主要过程，即标记过程和清除过程，在标记过程中将所有可达对象进行标记，在清除过程中将所有未标记的对象进行清除。分代回收则是基于标记清除基础上的一种空间换时间的实现策略。</p><h4 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h4><p>分代回收将 Python 对象划分成 3 代，包括 0、1、2 代。对于新创建的对象，会被放入 0 代。若一个对象在经过一次垃圾回收后没有被清除，则它会被放入下一代中。对于每一代对象来说，都具有触发垃圾回收的相关阈值（收集频率）。关于这个过程的细节，官方文档中给出了比较明确的描述：</p><blockquote><p>垃圾回收器把所有对象分类为 3 代，取决于对象幸存于多少次垃圾回收。新创建的对象会被放第 <code>0</code> 代。如果一个对象幸存于一次垃圾回收，则该对象会被放入下一代。第 <code>2</code> 代是最老的一代，因此这一代的对象幸存于垃圾回收后，仍会留在第 <code>2</code> 代。</p><p>为了判定何时需要进行垃圾回收，垃圾回收器会跟踪上一次回收后，分配和释放的对象的数目。当分配对象的数量减去释放对象的数量大于阈值 <em>threshold0</em> 时，回收器开始进行垃圾回收。起初只有第 <code>0</code> 代会被检查。当上一次第 <code>1</code> 代被检查后，第 <code>0</code> 代被检查的次数多于阈值 <em>threshold1</em> 时，第 <code>1</code> 代也会被检查。相似的， <em>threshold2</em> 设置了触发第 <code>2</code> 代被垃圾回收的第 <code>1</code> 代被垃圾回收的次数。</p></blockquote><p>分代回收的主要目的是降低回收中需要处理的对象数量，提高垃圾回收效率。可以使用 <a href="https://docs.python.org/zh-cn/3/library/gc.html#module-gc"><code>gc</code></a> 模块来执行或优化垃圾回收的相关过程，并获取更多的调试信息，比如通过 <code>gc.get_threshold()</code> 来获取当前的回收阈值；通过 <code>gc.disable()</code> 关闭垃圾回收，这通常在程序中确定不存在循环引用时使用。</p><p>CPython 在退出时不一定会释放所有内存，当 Python 解释器退出时，会进行内存清理，试图释放每个对象的内存，但不一定会释放所有内存，如全局命名空间中引用的某些对象、循环引用下 C 扩展库中分配的某些内存都有可能不被释放。</p><hr><p>Reference：<a href="http://www.imooc.com/read/79/article/2140">Python 在垃圾回收中如何解决循环引用问题？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算机存储器的分类&quot;&gt;&lt;a href=&quot;#计算机存储器的分类&quot; class=&quot;headerlink&quot; title=&quot;计算机存储器的分类&quot;&gt;&lt;/a&gt;计算机存储器的分类&lt;/h2&gt;&lt;p&gt;根据计算机存储器的作用，存储器可以分为主存储器、辅助存储器和缓冲存储器。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Python" scheme="http://giyn.work/categories/Python/"/>
    
    
    <category term="Python" scheme="http://giyn.work/tags/Python/"/>
    
    <category term="Computer" scheme="http://giyn.work/tags/Computer/"/>
    
  </entry>
  
  <entry>
    <title>SMOTE 算法</title>
    <link href="http://giyn.work/posts/21c8089f/"/>
    <id>http://giyn.work/posts/21c8089f/</id>
    <published>2020-10-07T13:32:57.000Z</published>
    <updated>2020-10-07T14:32:21.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在数据采样时，我们经常会遇到正负样本不均衡的问题，其容易导致模型过拟合问题，而大多数机器学习模型对正负样本比是敏感的（例如 LogisticRegression），对于该情况，常用解决方法有随机采样、分层采样、采集更多数据、oversampling、修改损失函数权重等方法。</p><h2 id="什么是-SMOTE-算法"><a href="#什么是-SMOTE-算法" class="headerlink" title="什么是 SMOTE 算法"></a>什么是 SMOTE 算法</h2><p>在人工智能研究杂志（Journal of Artificial Intelligence Research）的文章《SMOTE: Synthetic Minority Over-sampling Technique》提出了一种过采样算法 SMOTE（Synthetic Minority Oversampling Technique），即合成少数类过采样技术。</p><h2 id="SMOTE-算法的基本思想"><a href="#SMOTE-算法的基本思想" class="headerlink" title="SMOTE 算法的基本思想"></a>SMOTE 算法的基本思想</h2><p>SMOTE 算法的基本思想为：对那些占比小的类别的样本进行分析和模拟，并将人工模拟生成的新样本添加到原始数据集中，进而改善原始数据中的类别不平衡问题，SMOTE 算法的模拟过程采用了 KNN 算法的思想。</p><p>大致步骤如下：</p><ol><li><p>对于占比小的类别中每一个样本 $x$，以欧氏距离为标准计算 $x$ 到少数类样本集 $S_{min}$ 中所有样本的距离，得到其 $k$ 近邻。</p><p><img src="https://i.loli.net/2020/10/07/tpJw9uW2hYa3Il5.png" alt="059c22c781625f554a117d9878e8fb8.png" loading="lazy"></p></li><li><p>根据样本不平衡比例设置一个采样比例以确定采样倍率 $N$，对于每一个少数类样本 $x$，从其 $k$ 近邻中随机选择若干个样本。</p></li><li><p>假设选择的近邻为 $x_n$，对于每一个随机选出的近邻 $x_n$，分别与原样本按照如下的公式构建新的样本：</p><div>    $$ x_{new} = x+rand(0,1)×|x-x_n| $$</div><p><img src="https://i.loli.net/2020/10/07/XRvQGuqNEUrkjcZ.png" alt="3265c32ef3c314607902614520f5df6.png" loading="lazy"></p></li></ol><h2 id="使用-Python-实现-SMOTE-算法："><a href="#使用-Python-实现-SMOTE-算法：" class="headerlink" title="使用 Python 实现 SMOTE 算法："></a>使用 Python 实现 SMOTE 算法：</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> NearestNeighbors<span class="token keyword">class</span> <span class="token class-name">Smote</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> samples<span class="token punctuation">,</span> N<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>n_samples<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_attrs <span class="token operator">=</span> samples<span class="token punctuation">.</span>shape        self<span class="token punctuation">.</span>N <span class="token operator">=</span> N        self<span class="token punctuation">.</span>k <span class="token operator">=</span> k        self<span class="token punctuation">.</span>samples <span class="token operator">=</span> samples        self<span class="token punctuation">.</span>new_index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">over_sampling</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        N_ <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>N <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>synthetic <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_samples <span class="token operator">*</span> N_<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_attrs<span class="token punctuation">)</span><span class="token punctuation">)</span>        neighbors <span class="token operator">=</span> NearestNeighbors<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span>self<span class="token punctuation">.</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>samples<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'neighbors'</span><span class="token punctuation">,</span> neighbors<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>samples<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'samples'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>samples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment"># Finds the K-neighbors of a point.</span>            nnarray <span class="token operator">=</span> neighbors<span class="token punctuation">.</span>kneighbors<span class="token punctuation">(</span>self<span class="token punctuation">.</span>samples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                           return_distance<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'nna'</span><span class="token punctuation">,</span> nnarray<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_populate<span class="token punctuation">(</span>N_<span class="token punctuation">,</span> i<span class="token punctuation">,</span> nnarray<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>synthetic    <span class="token comment"># for each minority class sample i ,choose N of the k nearest neighbors and generate N synthetic samples.</span>    <span class="token keyword">def</span> <span class="token function">_populate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> N<span class="token punctuation">,</span> i<span class="token punctuation">,</span> nnarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'j'</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>            nn <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 包括end</span>            dif <span class="token operator">=</span> self<span class="token punctuation">.</span>samples<span class="token punctuation">[</span>nnarray<span class="token punctuation">[</span>nn<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>samples<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            gap <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>synthetic<span class="token punctuation">[</span>self<span class="token punctuation">.</span>new_index<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>samples<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> gap <span class="token operator">*</span> dif            self<span class="token punctuation">.</span>new_index <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>new_index<span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>smote <span class="token operator">=</span> Smote<span class="token punctuation">(</span>data<span class="token punctuation">,</span> N<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>smote<span class="token punctuation">.</span>over_sampling<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>References：</p><ul><li><p>Journal of Artificial Intelligence Research 16 (2002) 321–357《SMOTE: Synthetic Minority Over-sampling Technique》</p></li><li><p><a href="https://blog.csdn.net/jiede1/article/details/70215477">https://blog.csdn.net/jiede1/article/details/70215477</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在数据采样时，我们经常会遇到正负样本不均衡的问题，其容易导致模型过拟合问题，而大多数机器学习模型对正负样本比是敏感的（例如 Logistic</summary>
      
    
    
    
    <category term="MachineLearning" scheme="http://giyn.work/categories/MachineLearning/"/>
    
    
    <category term="MachineLearning" scheme="http://giyn.work/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Python 中使用协程实现异步操作</title>
    <link href="http://giyn.work/posts/f4de23f8/"/>
    <id>http://giyn.work/posts/f4de23f8/</id>
    <published>2020-10-05T09:11:05.000Z</published>
    <updated>2020-12-13T04:34:19.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h2><h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><p>阻塞状态指程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续处理其他事情，则称该程序在该操作上是阻塞的。</p><blockquote><p>常见的阻塞形式有：网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。</p></blockquote><h3 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h3><p>程序在等待某个操作的过程中，自身不被阻塞，可以继续处理其他事情，则称该程序在该操作上是非阻塞的。</p><blockquote><p>非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</p></blockquote><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，则称这些程序单元是同步执行的。</p><blockquote><p>如数据库中的数据更新，需要用“行锁”作为通信信号，让不同的更新请求强制排队顺序执行，则更新的操作是同步的，同步意味着有序。</p></blockquote><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>为完成某个任务，过程中不同程序单元之间无需通信协调也能完成任务的方式，则称这些程序单元是异步执行的。</p><blockquote><p>如网络爬虫下载网页，调度程序在调用完下载程序后，即可调度其他任务，而无需与该下载程序保持通信以协调行为，不同网页的下载、保存等操作都是无关的，也无需相互通知协调，这些异步操作的完成时刻是不确定的，异步意味着无序。</p></blockquote><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程，英文叫作 Coroutine，又称微线程、纤程，协程是一种用户态的轻量级线程。</p><p>协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此协程能保留上一次调用时的状态，即所有局部状态的一个特定组合，每次过程重入时，就相当于进入上一次调用的状态。</p><blockquote><p>协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。</p></blockquote><h3 id="协程用法"><a href="#协程用法" class="headerlink" title="协程用法"></a>协程用法</h3><p>我们可以使用协程来实现异步操作，比如在网络爬虫的场景下，发出一个请求之后，需要等待一定的时间才能得到响应，但其实在该等待过程中，程序可以实现其他的事情，等到响应返回之后再切换回来继续处理，这样可以充分利用 CPU 和其他资源，这就是协程的优势。</p><p>Python 中使用协程最常用的库为 <code>asyncio</code>。</p><p><strong>首先了解以下概念：</strong></p><ul><li><strong>event_loop：</strong>事件循环，相当于一个无限循环，可以把一些函数注册到该事件循环上，当满足条件发生的时候，就会调用对应的处理方法。</li><li><strong>coroutine：</strong>协程，在 Python 中常指代为协程对象类型，可以将协程对象注册到事件循环中，它会被事件循环调用。我们可以使用 async 关键字定义一个方法，此方法在调用时不会立即被执行，而是返回一个协程对象。</li><li><strong>task：</strong>任务，它是对协程对象的进一步封装，包含了任务的各个状态。</li><li><strong>future：</strong>代表将来执行或没有执行的任务的结果，实际上和 task 没有本质区别。</li></ul><p>另外还需了解 <code>async/await</code> 关键字，其专门用于定义协程。其中 <code>async</code> 定义一个协程，<code>await</code> 用来挂起阻塞方法的执行。</p><h4 id="定义协程"><a href="#定义协程" class="headerlink" title="定义协程"></a>定义协程</h4><p>首先定义一个协程，认识它和普通进程在实现上的不同之处：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>coroutine <span class="token operator">=</span> execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Coroutine:'</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling execute'</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling loop'</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Coroutine: &lt;coroutine object execute at 0x0000022B804A6C48&gt;After calling executeNumber: 1After calling loop</code></pre><p>首先引入 asyncio 库，这样才能使用 async 和 await，接着使用 async 定义一个 execute 方法，方法接收一个数字参数，执行方法之后会打印该数字，随后调用 execute 方法，然而该方法并没有执行，而是返回一个 coroutine 协程对象，接着使用 get_event_loop 方法创建一个事件循环 loop，并调用 loop 对象的 run_until_complete 方法将协程注册到事件循环 loop 中，然后启动，最后才看到 execute 方法打印输出结果。可见，async 定义的方法会变成一个无法直接执行的 coroutine 对象，必须将其注册到事件循环中才可以执行。</p><p>task 是对 coroutine 对象的进一步封装，其相比 coroutine 对象多了运行状态，比如 running、finished 等，我们可以用这些状态来获取协程对象的执行情况。</p><p>在上述例子中，当把 coroutine 对象传递给 run_until_complete 方法时，实际上将 coroutine 封装成了 task 对象，我们也可以显式地进行声明：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token keyword">return</span> xcoroutine <span class="token operator">=</span> execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Coroutine:'</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling execute'</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>task <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling loop'</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Coroutine: &lt;coroutine object execute at 0x000001F413606CC8&gt;After calling executeTask: &lt;Task pending coro&#x3D;&lt;execute() running at coroutine_learning.py:28&gt;&gt;Number: 1Task: &lt;Task finished coro&#x3D;&lt;execute() done, defined at coroutine_learning.py:28&gt; result&#x3D;1&gt;After calling loop</code></pre><p>此处定义了 loop 对象之后，接着调用其 create_task 方法将 coroutine 对象转化为 task 对象，随后打印输出，发现它是 pending 状态。然后将 task 对象添加到事件循环中执行，随后打印输出，发现它是 finished 状态，同时还可以看到输出 Number: 1，也就是 execute 方法的返回结果。</p><p>定义 task 对象还可以直接通过 asyncio 的 ensure_future 方法，返回结果也是 task 对象，这样就不必借助 loop 来定义，即使还没声明 loop 也可以提前定义 task 对象：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token keyword">return</span> xcoroutine <span class="token operator">=</span> execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Coroutine:'</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling execute'</span><span class="token punctuation">)</span>task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling loop'</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Coroutine: &lt;coroutine object execute at 0x0000023F48EE6CC8&gt;After calling executeTask: &lt;Task pending coro&#x3D;&lt;execute() running at coroutine_learning.py:47&gt;&gt;Number: 1Task: &lt;Task finished coro&#x3D;&lt;execute() done, defined at coroutine_learning.py:47&gt; result&#x3D;1&gt;After calling loop</code></pre><p>两者运行结果是一样的。</p><h4 id="绑定回调"><a href="#绑定回调" class="headerlink" title="绑定回调"></a>绑定回调</h4><p>另外也可以为某个 task 绑定一个回调方法：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>    status <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">return</span> status<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Status:'</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>coroutine <span class="token operator">=</span> request<span class="token punctuation">(</span><span class="token punctuation">)</span>task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span>task<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span></code></pre><p>此处定义了 request 方法，向百度发送请求，获取请求状态码，但此方法里没有任何 print 语句。随后定义一个 callback 方法，此方法接收一个参数，它是 task 对象，然后调用 print 方法打印 task 对象的结果，这样即定义了一个 coroutine 对象和一个回调方法，接着调用 add_done_callback 方法将 callback 方法传递给封装好的 task 对象，则当 task 执行完毕后就可以调用 callback 方法了，同时 task 对象作为参数传递给 callback 方法，再调用 task 对象的 result 方法即可获取返回结果。</p><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Task: &lt;Task pending coro&#x3D;&lt;request() running at coroutine_learning.py:79&gt; cb&#x3D;[callback() at coroutine_learning.py:84]&gt;Status: &lt;Response [200]&gt;Task: &lt;Task finished coro&#x3D;&lt;request() done, defined at coroutine_learning.py:79&gt; result&#x3D;&lt;Response [200]&gt;&gt;</code></pre><p>不用回调方法，直接在 task 运行完毕之后也可以直接调用 result 方法获取结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>    status <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">return</span> statuscoroutine <span class="token operator">=</span> request<span class="token punctuation">(</span><span class="token punctuation">)</span>task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task Result:'</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-python" data-language="python"><code class="language-python">Task<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task pending coro<span class="token operator">=</span><span class="token operator">&lt;</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span> running at coroutine_learning<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">103</span><span class="token operator">>></span>Task<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task finished coro<span class="token operator">=</span><span class="token operator">&lt;</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span> done<span class="token punctuation">,</span> defined at coroutine_learning<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">103</span><span class="token operator">></span> result<span class="token operator">=</span><span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">>></span>Task Result<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span></code></pre><p>两者运行结果是一样的。</p><h4 id="多任务协程"><a href="#多任务协程" class="headerlink" title="多任务协程"></a>多任务协程</h4><p>上述例子只执行了一次请求，如果想执行多次请求可以定义一个 task 列表，然后使用 asyncio 的 wait 方法即可执行：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>   status <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>   <span class="token keyword">return</span> statustasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Tasks:'</span><span class="token punctuation">,</span> tasks<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> task <span class="token keyword">in</span> tasks<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task Result:'</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>此处使用列表推导式创建 5 个 task，然后把该列表传递给 asyncio 的 wait 方法，接着将其注册到时间循环中，就可以发起 5 个任务了，最后再将任务的运行结果输出：</p><pre class="language-none"><code class="language-none">Tasks: [&lt;Task pending coro&#x3D;&lt;request() running at coroutine_learning.py:124&gt;&gt;, &lt;Task pending coro&#x3D;&lt;request() running at coroutine_learning.py:124&gt;&gt;, &lt;Task pending coro&#x3D;&lt;request() running at coroutine_learning.py:124&gt;&gt;, &lt;Task pending coro&#x3D;&lt;request() running at coroutine_learning.py:124&gt;&gt;, &lt;Task pending coro&#x3D;&lt;request() running at coroutine_learning.py:124&gt;&gt;]Task Result: &lt;Response [200]&gt;Task Result: &lt;Response [200]&gt;Task Result: &lt;Response [200]&gt;Task Result: &lt;Response [200]&gt;Task Result: &lt;Response [200]&gt;</code></pre><p>可以看到 5 个任务被顺次执行了。</p><h3 id="使用协程时的常见错误"><a href="#使用协程时的常见错误" class="headerlink" title="使用协程时的常见错误"></a>使用协程时的常见错误</h3><p>网络请求为耗时等待的操作，因为请求网页之后需要等待页面响应并返回结果，耗时等待的操作一般都是 I/O 操作，如文件读取、网络请求等。协程对于处理耗时等待操作上占有优势，当遇到需要等待的情况时，程序可以暂时挂起，转而去执行其他操作，从而避免一直等待一个程序而耗费过多的时间，达到充分利用资源的目的。</p><p>下面使用<a href="https://static4.scrape.cuiqingcai.com/">示例网站</a>进行演示，该网站响应较慢，因此可以通过爬取时间来体现爬虫速度。</p><h4 id="错误-1：缺少任务的挂起操作"><a href="#错误-1：缺少任务的挂起操作" class="headerlink" title="错误 1：缺少任务的挂起操作"></a>错误 1：缺少任务的挂起操作</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   url <span class="token operator">=</span> <span class="token string">'https://static4.scrape.cuiqingcai.com/'</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Waiting for'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>   response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get response from'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token string">'response'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cost time:'</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Waiting for https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;Get response from https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F; response &lt;Response [200]&gt;Waiting for https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;Get response from https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F; response &lt;Response [200]&gt;……Waiting for https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;Get response from https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F; response &lt;Response [200]&gt;Waiting for https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;Get response from https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F; response &lt;Response [200]&gt;Cost time: 101.05766081809998</code></pre><p>实现异步处理得先要有挂起的操作，当一个任务需要等待 I/O 结果时，可以挂起当前任务，转而去执行其他任务，这样才能充分利用资源。</p><h4 id="错误-2：requests-返回的-Response-对象不能和-await-一起使用"><a href="#错误-2：requests-返回的-Response-对象不能和-await-一起使用" class="headerlink" title="错误 2：requests 返回的 Response 对象不能和 await 一起使用"></a>错误 2：requests 返回的 Response 对象不能和 await 一起使用</h4><p>实现异步需要了解 await 的用法，使用 await 可以将耗时等待的操作挂起，让出控制权。当协程执行的时候遇到 await，时间循环就会将本协程挂起，转而去执行别的协程，直到其他的协程挂起或执行完毕，即修改  request 方法如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   url <span class="token operator">=</span> <span class="token string">'https://static4.scrape.cuiqingcai.com/'</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Waiting for'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>   response <span class="token operator">=</span> <span class="token keyword">await</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get response from'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token string">'response'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-python" data-language="python"><code class="language-python">Waiting <span class="token keyword">for</span> https<span class="token punctuation">:</span><span class="token operator">//</span>static4<span class="token punctuation">.</span>scrape<span class="token punctuation">.</span>cuiqingcai<span class="token punctuation">.</span>com<span class="token operator">/</span>Waiting <span class="token keyword">for</span> https<span class="token punctuation">:</span><span class="token operator">//</span>static4<span class="token punctuation">.</span>scrape<span class="token punctuation">.</span>cuiqingcai<span class="token punctuation">.</span>com<span class="token operator">/</span>……Cost time<span class="token punctuation">:</span> <span class="token number">54.90193843841553</span>Task exception was never retrievedfuture<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task finished coro<span class="token operator">=</span><span class="token operator">&lt;</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span> done<span class="token punctuation">,</span> defined at coroutine_learning<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">171</span><span class="token operator">></span> exception<span class="token operator">=</span>TypeError<span class="token punctuation">(</span><span class="token string">"object Response can't be used in 'await' expression"</span><span class="token punctuation">)</span><span class="token operator">></span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"coroutine_learning.py"</span><span class="token punctuation">,</span> line <span class="token number">174</span><span class="token punctuation">,</span> <span class="token keyword">in</span> request    response <span class="token operator">=</span> <span class="token keyword">await</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token builtin">object</span> Response can<span class="token string">'t be used in '</span><span class="token keyword">await</span>' expressionTask exception was never retrievedfuture<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task finished coro<span class="token operator">=</span><span class="token operator">&lt;</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span> done<span class="token punctuation">,</span> defined at coroutine_learning<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">171</span><span class="token operator">></span> exception<span class="token operator">=</span>TypeError<span class="token punctuation">(</span><span class="token string">"object Response can't be used in 'await' expression"</span><span class="token punctuation">)</span><span class="token operator">></span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"coroutine_learning.py"</span><span class="token punctuation">,</span> line <span class="token number">174</span><span class="token punctuation">,</span> <span class="token keyword">in</span> request    response <span class="token operator">=</span> <span class="token keyword">await</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token builtin">object</span> Response can<span class="token string">'t be used in '</span><span class="token keyword">await</span>' expression……</code></pre><p>使用 await 方法后的确挂起并等待了，但是最后却出现错误，其意思是 requests 返回的 Response 对象不能和 await 一起使用。</p><p><strong>根据官方文档说明，await 后面的对象必须是如下格式之一：</strong></p><ul><li>A native coroutine object returned from a native coroutine function，一个原生 coroutine 对象。</li><li>A generator-based coroutine object returned from a function decorated with types.coroutine，一个由 types.coroutine 修饰的生成器，该生成器可以返回 coroutine 对象。</li><li>An object with an <strong>await</strong> method returning an iterator，一个包含 <strong>await</strong> 方法的对象返回的一个迭代器。</li></ul><p>而 requests 返回的 Response 不符合上面任一条件，因此会出现错误。</p><p>那么既然 await 后面可以跟一个 coroutine 对象，那试试看用 async 把请求的方法改成 coroutine 对象：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   url <span class="token operator">=</span> <span class="token string">'https://static4.scrape.cuiqingcai.com/'</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Waiting for'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>   response <span class="token operator">=</span> <span class="token keyword">await</span> get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get response from'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token string">'response'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cost time:'</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>此处将请求页面的方法独立出来，并用 async 修饰即可得到一个 coroutine 对象，运行结果如下：</p><pre class="language-none"><code class="language-none">Waiting for https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;Get response from https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F; response &lt;Response [200]&gt;Waiting for https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;Get response from https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F; response &lt;Response [200]&gt;……Cost time: 39.119487047195435</code></pre><p>依然不是异步执行，也就是说仅仅将涉及 I/O 操作的代码封装到 async 修饰的方法里面是不可行的，我们必须<strong>使用支持异步操作的请求方式才可以实现真正的异步</strong>。</p><h3 id="使用-aiohttp-实现协程"><a href="#使用-aiohttp-实现协程" class="headerlink" title="使用 aiohttp 实现协程"></a>使用 aiohttp 实现协程</h3><p>aiohttp 是一个支持异步请求的库，利用它和 asyncio 可以非常方便地实现异步请求操作。</p><p>（安装：<code>pip install aiohttp</code>）</p><p>下面尝试使用 aiohttp 实现协程：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>   session <span class="token operator">=</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span>   response <span class="token operator">=</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>   <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">await</span> session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> response<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   url <span class="token operator">=</span> <span class="token string">'https://static4.scrape.cuiqingcai.com/'</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Waiting for'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>   response <span class="token operator">=</span> <span class="token keyword">await</span> get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get response from'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token string">'response'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cost time:'</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><p>此处将<strong>请求库由 requests 改成了 aiohttp，通过 aiohttp 的 ClientSession 类的 get 方法进行请求</strong>，运行结果如下：</p><pre class="language-none"><code class="language-none">Waiting for https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;Waiting for https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;……Get response from https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F; response &lt;ClientResponse(https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;) [200 OK]&gt;&lt;CIMultiDictProxy(&#39;Server&#39;: &#39;nginx&#x2F;1.17.8&#39;, &#39;Date&#39;: &#39;Wed, 07 Oct 2020 02:20:39 GMT&#39;, &#39;Content-Type&#39;: &#39;text&#x2F;html; charset&#x3D;utf-8&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Vary&#39;: &#39;Accept-Encoding&#39;, &#39;X-Frame-Options&#39;: &#39;DENY&#39;, &#39;X-Content-Type-Options&#39;: &#39;nosniff&#39;, &#39;Referrer-Policy&#39;: &#39;same-origin&#39;, &#39;Strict-Transport-Security&#39;: &#39;max-age&#x3D;15724800; includeSubDomains&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;)&gt;Get response from https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F; response &lt;ClientResponse(https:&#x2F;&#x2F;static4.scrape.cuiqingcai.com&#x2F;) [200 OK]&gt;&lt;CIMultiDictProxy(&#39;Server&#39;: &#39;nginx&#x2F;1.17.8&#39;, &#39;Date&#39;: &#39;Wed, 07 Oct 2020 02:20:39 GMT&#39;, &#39;Content-Type&#39;: &#39;text&#x2F;html; charset&#x3D;utf-8&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Vary&#39;: &#39;Accept-Encoding&#39;, &#39;X-Frame-Options&#39;: &#39;DENY&#39;, &#39;X-Content-Type-Options&#39;: &#39;nosniff&#39;, &#39;Referrer-Policy&#39;: &#39;same-origin&#39;, &#39;Strict-Transport-Security&#39;: &#39;max-age&#x3D;15724800; includeSubDomains&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;)&gt;……Cost time: 5.771064758300781</code></pre><p>可以看到运行时间大幅度减少了，分析一下，此处使用了 await，后面跟了 get 方法，在执行这 10 个协程的时候，如果遇到了 await，那么就会将当前协程挂起，转而去执行其他的协程，直到其他的协程也挂起或执行完毕，再进行下一个协程的执行。</p><p>运行程序，时间循环会运行第一个 task，当执行到第一个 await 跟着的 get 方法时，该 task 被挂起，但 get 方法第一步的执行是非阻塞的，挂起之后立马被唤醒，创建了 ClientSession 对象，接着遇到了第二个 await，调用了 session.get 请求方法，然后就被挂起了，由于请求需要耗时很久，所以一直没有被唤醒，当第一个 task 被挂起，事件循环会寻找当前未被挂起的协程继续执行，于是转而执行第二个 task，重复上述流程，直到执行完最后一个 task 的 session.get 方法之后，所有 task 都已处于挂起状态，直到所有请求都有了响应，其他 task 也被唤醒并输出请求结果。</p><blockquote><p>异步操作的便捷之处在于当遇到阻塞式操作时，任务被挂起，程序接着去执行其他的任务，这样可以充分利用 CPU 时间，而不必把时间浪费在等待 I/O 上。</p></blockquote><p>下面以百度为例，来测试一下并发数量为 1、3、5、10、…、500 的情况下的耗时情况：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>        session <span class="token operator">=</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com/'</span>        <span class="token keyword">await</span> get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">]</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> <span class="token string">'Cost time:'</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span>number<span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Number: 1 Cost time: 0.11201262474060059Number: 3 Cost time: 0.058622121810913086Number: 5 Cost time: 0.05884289741516113Number: 10 Cost time: 0.06981253623962402Number: 15 Cost time: 0.07978653907775879Number: 30 Cost time: 0.08477306365966797Number: 50 Cost time: 0.1296529769897461Number: 75 Cost time: 0.20744585990905762Number: 100 Cost time: 0.7709352970123291Number: 200 Cost time: 0.5674834251403809Number: 500 Cost time: 1.262622356414795</code></pre><p>在服务器能承受高并发的前提下，即使增加并发数量，其爬取速度几乎不太受影响。</p><p>在使用了异步请求之后，几乎可以在相同的时间内实现多次网络请求，将其运用到网络爬虫中会带来可观的效益。</p><p>Reference：<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1677">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1677</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;阻塞与非阻塞&quot;&gt;&lt;a href=&quot;#阻塞与非阻塞&quot; class=&quot;headerlink&quot; title=&quot;阻塞与非阻塞&quot;&gt;&lt;/a&gt;阻塞与非阻塞&lt;/h2&gt;&lt;h3 id=&quot;阻塞&quot;&gt;&lt;a href=&quot;#阻塞&quot; class=&quot;headerlink&quot; title=&quot;阻塞&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Python" scheme="http://giyn.work/categories/Python/"/>
    
    
    <category term="Python" scheme="http://giyn.work/tags/Python/"/>
    
    <category term="Computer" scheme="http://giyn.work/tags/Computer/"/>
    
  </entry>
  
  <entry>
    <title>使用 opencv-python 提取视频每一帧的图片</title>
    <link href="http://giyn.work/posts/b123dfba/"/>
    <id>http://giyn.work/posts/b123dfba/</id>
    <published>2020-10-01T07:36:37.000Z</published>
    <updated>2020-10-01T10:57:31.771Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>计算机视觉是指用摄影机和计算机代替人眼对目标进行识别、跟踪和测量等机器视觉，并进一步做图像处理，用计算机处理成为更适合人眼观察或传送给仪器检测的图像，其任务有图像形成、图像处理、图像提取和图像的三维推理，而目标识别和面部识别也是很重要的研究领域。</p></blockquote><blockquote><p>OpenCV 的全称是 Open Source Computer Vision Library，是一个跨平台的计算机视觉库，其基于C/C++，支持 Linux/Windows/MacOS/Android/iOS，并提供了 Python，Matlab 和 Java 等语言的接口。</p></blockquote><h2 id="如何使用-opencv-python-提取视频每一帧的图片？"><a href="#如何使用-opencv-python-提取视频每一帧的图片？" class="headerlink" title="如何使用 opencv-python 提取视频每一帧的图片？"></a>如何使用 opencv-python 提取视频每一帧的图片？</h2><ul><li><p>编程语言：Python</p></li><li><p>所需库：cv2</p></li></ul><h3 id="获取视频（创建-VideoCapture-对象）"><a href="#获取视频（创建-VideoCapture-对象）" class="headerlink" title="获取视频（创建 VideoCapture 对象）"></a>获取视频（创建 VideoCapture 对象）</h3><p>使用 <code>cv2.VideoCapture</code> 类</p><p>Args：</p><ul><li><p>filename – 文件路径；</p></li><li><p>device – 视频设备id ，若只有一个摄像头可以填 0，表示打开默认摄像头；</p></li></ul><pre class="language-python" data-language="python"><code class="language-python">vc <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span>filename<span class="token punctuation">)</span></code></pre><h4 id="检验-VideoCapture-对象是否创境成功"><a href="#检验-VideoCapture-对象是否创境成功" class="headerlink" title="检验 VideoCapture 对象是否创境成功"></a>检验 VideoCapture 对象是否创境成功</h4><p>使用 <code>VideoCapture</code> 对象的 <code>isOpened</code> 方法 </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># determine whether to open normally</span><span class="token keyword">if</span> vc<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> vc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    ret <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><p>若成功，返回 True。</p><h3 id="按帧读取视频"><a href="#按帧读取视频" class="headerlink" title="按帧读取视频"></a>按帧读取视频</h3><p>使用 <code>VideoCapture</code> 对象的 <code>read</code> 方法 </p><p>使用 VideoCapture 对象的 read 方法按帧读取视频，ret, frame 是 read 方法的两个返回值 ，其中 ret 是布尔值，如果能正确读取帧，则返回 True；如果文件读取到结尾，它的返回值就为 False。frame 就是每一帧的图像，是一个三维矩阵。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># loop read video frame</span><span class="token keyword">while</span> ret<span class="token punctuation">:</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> vc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h3><p>使用 <code>cv2.imwrite()</code> 函数</p><p>第一个参数是文件名，第二个参数是图片资源。</p><pre class="language-python" data-language="python"><code class="language-python">cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> image<span class="token punctuation">)</span></code></pre><h3 id="播放每一帧时适当持续时间"><a href="#播放每一帧时适当持续时间" class="headerlink" title="播放每一帧时适当持续时间"></a>播放每一帧时适当持续时间</h3><p>使用 <code>cv2.waitKey()</code> 函数</p><pre class="language-python" data-language="python"><code class="language-python">cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>参数 1 表示延时 1ms 切换到下一帧图像，对于视频而言；</p><p>参数 0 表示只显示当前帧图像，相当于视频暂停；</p><p>参数过大会因为延时过久而卡顿感觉到卡顿。</p><h3 id="关闭视频文件"><a href="#关闭视频文件" class="headerlink" title="关闭视频文件"></a>关闭视频文件</h3><p>使用 <code>VideoCapture</code> 对象的 <code>release</code> 方法</p><pre class="language-python" data-language="python"><code class="language-python">vc<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-------------------------------------# -*- coding: utf-8 -*-# @Time    : 2020/10/1 15:44:12# @Author  : Giyn# @Email   : giyn.jy@gmail.com# @File    : video_processing.py# @Software: PyCharm-------------------------------------"""</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> logging<span class="token comment"># log information settings</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>                    <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s - %(levelname)s: %(message)s'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_image</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Save the images.    Args:        num: serial number        image: image resource    Returns:        None    """</span>    image_path <span class="token operator">=</span> <span class="token string">'../raw_pictures/&#123;&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> image<span class="token punctuation">)</span>file_path <span class="token operator">=</span> <span class="token string">'../videos/video_1.mp4'</span>vc <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>  <span class="token comment"># import video files</span><span class="token comment"># determine whether to open normally</span><span class="token keyword">if</span> vc<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> vc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    ret <span class="token operator">=</span> <span class="token boolean">False</span>count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># count the number of pictures</span>frame_interval <span class="token operator">=</span> <span class="token number">30</span>  <span class="token comment"># video frame count interval frequency</span>frame_interval_count <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># loop read video frame</span><span class="token keyword">while</span> ret<span class="token punctuation">:</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> vc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># store operation every time f frame</span>    <span class="token keyword">if</span> frame_interval_count <span class="token operator">%</span> frame_interval <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        save_image<span class="token punctuation">(</span>count<span class="token punctuation">,</span> frame<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"num："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", frame: "</span> <span class="token operator">+</span>                     <span class="token builtin">str</span><span class="token punctuation">(</span>frame_interval_count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    frame_interval_count <span class="token operator">+=</span> <span class="token number">1</span>    cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>vc<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p><img src="https://i.loli.net/2020/10/01/tHPDNUyhFcv3roB.png" alt="5b3e88fd8b8933a3936717fa8dde6bb.png" loading="lazy"></p><p><img src="https://i.loli.net/2020/10/01/k4eZicdPstjM7JY.png" alt="2992cfb20d33925600d13ba03fb596a.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;计算机视觉是指用摄影机和计算机代替人眼对目标进行识别、跟踪和测量等机器视觉，并进一步做图像处理，用计算机处理成为更适合人眼观察或传送给仪器检测的图像，其任务有图像形成、图像处理、图像提取和图像的三维推理，而目标识别和面部识别也是很重要的研究领域。&lt;</summary>
      
    
    
    
    <category term="opencv" scheme="http://giyn.work/categories/opencv/"/>
    
    
    <category term="Python" scheme="http://giyn.work/tags/Python/"/>
    
    <category term="opencv" scheme="http://giyn.work/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>requests 库高级用法</title>
    <link href="http://giyn.work/posts/423cd474/"/>
    <id>http://giyn.work/posts/423cd474/</id>
    <published>2020-09-30T11:48:00.000Z</published>
    <updated>2020-10-02T07:08:17.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="requests-库高级用法"><a href="#requests-库高级用法" class="headerlink" title="requests 库高级用法"></a>requests 库高级用法</h2><p>requests 库的基本用法有 GET、POST 请求以及 Response 对象等等，但 requests 库的功能十分强大，它能做到完成 HTTP 的所有操作。</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>requests 库可以模拟提交一些数据，例如有的网站需要上传文件：</p><pre class="language-python" data-language="python"><code class="language-python">files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'Helper.ico'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p><strong>Result：</strong></p><pre class="language-none"><code class="language-none">&#123;  &quot;args&quot;: &#123;&#125;,   &quot;data&quot;: &quot;&quot;,   &quot;files&quot;: &#123;    &quot;file&quot;: &quot;data:application&#x2F;octet-stream;base64,AAABAA……&#125;,   &quot;form&quot;: &#123;&#125;,   &quot;headers&quot;: &#123;    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,     &quot;Content-Length&quot;: &quot;67792&quot;,     &quot;Content-Type&quot;: &quot;multipart&#x2F;form-data; boundary&#x3D;d3323082de17a33701180820874930a0&quot;,     &quot;Host&quot;: &quot;httpbin.org&quot;,     &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.22.0&quot;,     &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5f7478d3-6d46fa5d3ce2b731603098bd&quot;  &#125;,   &quot;json&quot;: null,   &quot;origin&quot;: &quot;23.99.107.243&quot;,   &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;&#125;</code></pre><p><a href="http://httpbin.org/post">http://httpbin.org/post</a> 会返回 HTTP 响应，其中包含 files 字段，而 form 字段是空的，这说明文件上传部分会单独有一个 files 字段来标识。</p><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>使用 requests 获取和设置 Cookies 只需一步。</p><p>获取 Cookies：</p><pre class="language-python" data-language="python"><code class="language-python">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> value<span class="token punctuation">)</span></code></pre><p>Result：</p><pre class="language-none"><code class="language-none">&lt;RequestsCookieJar[&lt;Cookie BDORZ&#x3D;27315 for .baidu.com&#x2F;&gt;]&gt;BDORZ&#x3D;27315</code></pre><p>首先调用 cookies 属性即可获取 HTTP 请求的 Cookies 信息，可以发现它是 RequestCookieJar 类型，接着用 items 方法将其转化为元组组成的列表，遍历输出每一个 Cookie 的名称和值，实现 Cookie 的遍历解析。</p><p>此处可以用 Cookie 来维持登录状态，以 GitHub 为测试样例，首先登录 GitHub，接着使用 F12 查看登录的 Headers 信息，并将 Headers 中的 Cookie 内容复制下来：</p><p><img src="https://i.loli.net/2020/10/01/tHM9EuYAxXz267S.png" alt="1c8be6f25a7362075727baa795a7015.png" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'_octo=GH1.1.1179373472.1580811112; _ga=GA1.2.1111800227.1581126066; _device_id=6eb9156285db6a78b8bb1372cd2ef157; experiment:homepage_signup_flow=eyJ2ZXJzaW9uIjoiMSIsInJvbGxPdXRQbGFjZW1lbnQiOjczLjQxNjA3MzcwNzI2MjA3LCJzdWJncm91cCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAyMC0wNC0xN1QwNToyODowOC40OTJaIiwidXBkYXRlZEF0IjoiMjAyMC0wNC0xN1QwNTozNjoyNi40MzhaIn0=; user_session=aLl4gq2OaWXwA6gA-CBd69fuXfsPpOZRjl9hLzvlspI_cDe9; __Host-user_session_same_site=aLl4gq2OaWXwA6gA-CBd69fuXfsPpOZRjl9hLzvlspI_cDe9; logged_in=yes; dotcom_user=Giyn; tz=Asia%2FShanghai; has_recent_activity=1; _gat=1; _gh_sess=……'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>返回结果中包含了登录后才能显示的 GitHub 用户名信息：</p><p><img src="https://i.loli.net/2020/10/01/8kd16Urb9NF4eEA.png" alt="5839e0156e75445d78b89942780699e.png" loading="lazy"></p><p>此处也可以通过 cookies 参数设置 Cookies 信息，首先可以构造一个 RequestsCookieJar 对象，接着把刚才复制的 Cookie 处理一下并赋值：</p><pre class="language-python" data-language="python"><code class="language-python">cookies <span class="token operator">=</span> <span class="token string">'_octo=GH1.1.1179373472.1580811112; _ga=GA1.2.1111800227.1581126066; _device_id=6eb9156285db6a78b8bb1372cd2ef157; experiment:homepage_signup_flow=eyJ2ZXJzaW9uIjoiMSIsInJvbGxPdXRQbGFjZW1lbnQiOjczLjQxNjA3MzcwNzI2MjA3LCJzdWJncm91cCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAyMC0wNC0xN1QwNToyODowOC40OTJaIiwidXBkYXRlZEF0IjoiMjAyMC0wNC0xN1QwNTozNjoyNi40MzhaIn0=; user_session=aLl4gq2OaWXwA6gA-CBd69fuXfsPpOZRjl9hLzvlspI_cDe9; __Host-user_session_same_site=aLl4gq2OaWXwA6gA-CBd69fuXfsPpOZRjl9hLzvlspI_cDe9; logged_in=yes; dotcom_user=Giyn; tz=Asia%2FShanghai; has_recent_activity=1; _gat=1; _gh_sess=……'</span>jar <span class="token operator">=</span> requests<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>RequestsCookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36'</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> cookie <span class="token keyword">in</span> cookies<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    jar<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span>jar<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>此处首先新建一个 RequestCookieJar 对象，然后将复制下来的 cookies 利用 split 方法分割，接着利用 set 方法设置好每个 Cookie 的 key 和 value，最后通过调用 requests 的 get 方法并传递给 cookies 参数即可。</p><p>运行代码，返回结果中同样包含了登录后才能显示的 GitHub 用户名信息：</p><p><img src="https://i.loli.net/2020/10/02/HxDkENPaO5WbCqs.png" alt="01c824ee07f20b10e4d3096a21cef45.png" loading="lazy"></p><h3 id="Session-维持"><a href="#Session-维持" class="headerlink" title="Session 维持"></a>Session 维持</h3><p>在 requests 库中，如果直接使用 get 或 post 等方法虽然可以做到模拟 HTTP 请求，但这实际上相当于不同的 Session，即相当于用两个浏览器打开了不同的页面。</p><p>例如，第一个请求利用 post 方法登录了某个网站，第二次想获取成功登录后的个人信息，又用了一次 get 方法去请求个人信息页面，这相当于打开了两个浏览器，是两个完全不相关的 Session，因此是无法获取个人信息的。</p><blockquote><p>不同浏览器之间的 Session 是不能共享的，Session 是与用户相关的，一个人在同一台机上打开两个浏览器，即使地址一样也是两个 Session。</p></blockquote><blockquote><p>在两次请求时设置一样的 Cookies 可以解决问题，但这样很烦琐，下面有更简单的解决方法。</p></blockquote><p>解决上述问题的主要方法就是维持同一个 Session，相当于打开一个新的浏览器选项卡而不是新开一个浏览器页面，实现该需求就要用到 Session 对象。</p><p>利用 Session 对象可以方便地维护一个 Session，而且不用担心 Cookies 的问题，Session 对象会自动处理好：</p><ul><li><strong>无 Session 对象：</strong></li></ul><pre class="language-python" data-language="python"><code class="language-python">requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/cookies/set/number/Giyn'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/cookies'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>测试网址为 <a href="http://httpbin.org/cookies/set/name/Giyn">http://httpbin.org/cookies/set/name/Giyn</a>，对该网址发送请求时，可以设置一个 cookie，名称叫作 name，内容是 Giyn，接着又请求了 <a href="http://httpbin.org/cookies">http://httpbin.org/cookies</a>，此网址可以获取当前的 Cookies。</p><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>  <span class="token string">"cookies"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>由于两次请求的 Cookie 不同，因此无法获取所需信息。</p><ul><li><strong>有 Session 对象：</strong></li></ul><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/cookies/set/name/Giyn'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/cookies'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>  <span class="token string">"cookies"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Giyn"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>使用了 Session 对象即可成功获取信息。总的来说，利用 Session 对象可以做到模拟同一个 Session 而不用担心 Cookies 的问题，它通常用于模拟登录成功之后再进行下一步的操作。</p><h3 id="SSL-证书验证"><a href="#SSL-证书验证" class="headerlink" title="SSL 证书验证"></a>SSL 证书验证</h3><p>如今许多网站都要求使用 HTTPS 协议，但是有些网站没有设置好 HTTPS 证书，或者网站的 HTTPS 证书不被 CA 机构认可，此时这些网站可能就会出现 SSL 证书错误的提示。</p><p>如果用 Chrome 浏览器打开这个<a href="https://static2.scrape.cuiqingcai.com/">示例网站</a>，则会提示「您的连接不是私密连接」这样的错误：</p><p><img src="https://i.loli.net/2020/10/02/VPOoMxQfdcyYraW.png" alt="2c65ea9858397f2974ea76f9eca10f5.png" loading="lazy"></p><blockquote><p>可以在浏览器中通过设置来忽略证书的验证。</p></blockquote><p>使用 requests 库对这类网站发出请求：</p><pre class="language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://static2.scrape.cuiqingcai.com/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python">SSLError<span class="token punctuation">:</span> HTTPSConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'static2.scrape.cuiqingcai.com'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">443</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Max retries exceeded <span class="token keyword">with</span> url<span class="token punctuation">:</span> <span class="token operator">/</span> <span class="token punctuation">(</span>Caused by SSLError<span class="token punctuation">(</span>SSLError<span class="token punctuation">(</span><span class="token string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')])"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>可以看到抛出了 SSLError 错误，因为请求的 URL 的证书是无效的，若实在需要爬取这个网站，可以使用 verify 参数控制是否验证证书。如果将 verify 参数设置为 False，在请求时就不会再验证证书是否有效；如果不加 verify 参数，默认值是 True，会自动验证。</p><p><strong>设置 verify 参数不验证 SSL 证书：</strong></p><pre class="language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://static2.scrape.cuiqingcai.com/'</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python">\Anaconda\lib\site<span class="token operator">-</span>packages\urllib3\connectionpool<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">1004</span><span class="token punctuation">:</span> InsecureRequestWarning<span class="token punctuation">:</span> Unverified HTTPS request <span class="token keyword">is</span> being made to host <span class="token string">'static2.scrape.cuiqingcai.com'</span><span class="token punctuation">.</span> Adding certificate verification <span class="token keyword">is</span> strongly advised<span class="token punctuation">.</span> See<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">//</span>urllib3<span class="token punctuation">.</span>readthedocs<span class="token punctuation">.</span>io<span class="token operator">/</span>en<span class="token operator">/</span>latest<span class="token operator">/</span>advanced<span class="token operator">-</span>usage<span class="token punctuation">.</span>html<span class="token comment">#ssl-warnings</span>  InsecureRequestWarning<span class="token punctuation">,</span><span class="token number">200</span></code></pre><p>程序发出一个 Warning，它建议我们给它指定证书，此处可以通过设置忽略警告的方式来屏蔽该警告：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> requests<span class="token punctuation">.</span>packages <span class="token keyword">import</span> urllib3urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://static2.scrape.cuiqingcai.com/'</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>或者通过捕获警告到日志的方式忽略警告：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>captureWarnings<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://static2.scrape.cuiqingcai.com/'</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>此外也可以指定一个本地证书用作客户端证书，其可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组：</p><pre class="language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://static2.scrape.cuiqingcai.com/'</span><span class="token punctuation">,</span> cert<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'/path/server.crt'</span><span class="token punctuation">,</span> <span class="token string">'/path/server.key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><h3 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h3><p>在本机网络状况不好或者服务器网络响应延迟甚至无响应时，我们可能需要等待很久才能收到响应，甚至到最后收不到响应而报错。为了防止服务器不能及时响应，应该设置一个超时时间，即超过了这个时间还没有得到响应就报错。此处需要用到 timeout 参数，其时间的计算是从发出请求到服务器返回响应的时间：</p><pre class="language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>通过 timeout 参数，我们可以将超时时间设置为 1 秒，如果 1 秒内没有响应就抛出异常。</p><p>实际上，请求分为两个阶段，即连接（connect）和读取（read），如上设置的 timeout 参数将用作 connect 和 read 二者的 timeout 总和，如果要分别指定，就可以传入一个元组：</p><pre class="language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果希望永久等待，可以直接将 timeout 设置为 None，或者直接留空（默认是 None）：</p><pre class="language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># r = requests.get('https://httpbin.org/get')</span></code></pre><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><p>在访问某些设置了身份认证的网站时，例如：<a href="https://static3.scrape.cuiqingcai.com/">https://static3.scrape.cuiqingcai.com/</a>，可能会遇到这样的认证窗口：</p><p><img src="https://i.loli.net/2020/10/02/DYNQWw4zsun2glc.png" alt="90eb3bf4f8e066510c16b7ad2a6eaf8.png" loading="lazy"></p><p>如果遇到了这种情况，是因为该网站启用了基本身份认证，英文叫作 HTTP Basic Access Authentication，它是一种<strong>用来允许网页浏览器或其他客户端程序在请求时提供用户名和口令形式的身份凭证</strong>的一种登录验证方式。</p><p>如果遇到了上述情况，可以使用 requests 自带的身份认证功能，通过 auth 参数即可设置：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth  r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://static3.scrape.cuiqingcai.com/'</span><span class="token punctuation">,</span> auth<span class="token operator">=</span>HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">200</span></code></pre><p>上述示例网站的用户名和密码都是 admin，此处可以直接设置。如果用户名和密码都正确的话，请求时会自动认证成功，返回 200 状态码；如果认证失败，则返回 401 状态码。</p><p>如果每次发出请求，参数都传一个 HTTPBasicAuth 类，则显得有点烦琐，requests 库提供了直接传一个元组的方法，它会默认使用 HTTPBasicAuth 这个类来认证：</p><pre class="language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://static3.scrape.cuiqingcai.com/'</span><span class="token punctuation">,</span> auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">200</span></code></pre><p>此外，requests 库还提供了其他认证方式，如 OAuth 认证（需要安装 oauth 包：<code>pip install requests_oauthlib</code>）：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> requests_oauthlib <span class="token keyword">import</span> OAuth1url <span class="token operator">=</span> <span class="token string">'https://api.twitter.com/1.1/account/verify_credentials.json'</span>auth <span class="token operator">=</span> OAuth1<span class="token punctuation">(</span><span class="token string">'APP_KEY'</span><span class="token punctuation">,</span> <span class="token string">'APP_SECRET'</span><span class="token punctuation">,</span>              <span class="token string">'USER_OAUTH_TOKEN'</span><span class="token punctuation">,</span> <span class="token string">'USER_OAUTH_TOKEN_SECRET'</span><span class="token punctuation">)</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> auth<span class="token operator">=</span>auth<span class="token punctuation">)</span></code></pre><p><a href="https://requests-oauthlib.readthedocs.org/">requests_oauthlib 官方文档</a></p><h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><p>某些网站在经过频繁的请求之后，可能会弹出验证码，或者跳转到登录认证页面，甚至可能会直接封禁客户端的 IP，导致用户在一定时间段内无法访问。为了防止这种情况发生，需要设置代理来解决这个问题，此处需要用到 proxies 参数：</p><pre class="language-python" data-language="python"><code class="language-python">proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'http://'</span> <span class="token operator">+</span> <span class="token string">'113.194.28.190:9999'</span><span class="token punctuation">,</span>        <span class="token string">'https'</span><span class="token punctuation">:</span> <span class="token string">'https://'</span> <span class="token operator">+</span> <span class="token string">'113.194.28.190:9999'</span>   <span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span></code></pre><p>如果代理需要使用上述的身份认证，可以使用类似 <code>http://user:password@host:port</code> 这样的语法来设置代理，即在代理的前面加上用户名和密码：</p><pre class="language-python" data-language="python"><code class="language-python">proxy <span class="token operator">=</span> <span class="token string">'username:password@113.194.28.190:9999'</span></code></pre><p>除了基本的 HTTP 代理外，requests 库还支持 SOCKS 协议的代理，（需要安装 socks 库：<code>pip3 install &quot;requests[socks]&quot;</code>）：</p><pre class="language-python" data-language="python"><code class="language-python">proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'socks5://user:password@host:port'</span><span class="token punctuation">,</span>    <span class="token string">'https'</span><span class="token punctuation">:</span> <span class="token string">'socks5://user:password@host:port'</span><span class="token punctuation">&#125;</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span></code></pre><h3 id="Prepared-Request"><a href="#Prepared-Request" class="headerlink" title="Prepared Request"></a>Prepared Request</h3><p>实际上，requests 发送请求时在内部构造了一个 Request 对象，并给这个对象赋予了各种参数，包括 url、headers、data 等，接着直接把这个 Request 对象发送出去，请求成功后返回一个 Response 对象，再对其解析即可。</p><p>Request 对象实际上就是 Prepared Request。</p><p>下面深入一下，试着不用 get 方法，而是直接构造一个 Prepared Request 对象：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> requests <span class="token keyword">import</span> Request<span class="token punctuation">,</span> Sessionurl <span class="token operator">=</span> <span class="token string">'http://httpbin.org/post'</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Giyn'</span><span class="token punctuation">&#125;</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36'</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span>req <span class="token operator">=</span> Request<span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>prepped <span class="token operator">=</span> s<span class="token punctuation">.</span>prepare_request<span class="token punctuation">(</span>req<span class="token punctuation">)</span>r <span class="token operator">=</span> s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>prepped<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>此处引入了 Request 类，然后用 url、data 和 headers 参数构造了一个 Request 对象，此时需要再调用 Session 的 prepare_request 方法将其转换为一个 Prepared Request 对象，接着调用 send 方法发送。</p><p>运行结果：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>  <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>   <span class="token string">"files"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token string">"form"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Giyn"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token string">"headers"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"*/*"</span><span class="token punctuation">,</span>     <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span>     <span class="token string">"Content-Length"</span><span class="token punctuation">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span>     <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>     <span class="token string">"Host"</span><span class="token punctuation">:</span> <span class="token string">"httpbin.org"</span><span class="token punctuation">,</span>     <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36"</span><span class="token punctuation">,</span>     <span class="token string">"X-Amzn-Trace-Id"</span><span class="token punctuation">:</span> <span class="token string">"Root=1-5f76d019-4ef039c66f7f2ff26bac88c3"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token string">"json"</span><span class="token punctuation">:</span> null<span class="token punctuation">,</span>   <span class="token string">"origin"</span><span class="token punctuation">:</span> <span class="token string">"211.97.3.238"</span><span class="token punctuation">,</span>   <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">&#125;</span></code></pre><p>其同样达到了 POST 方法的请求效果。</p><p>使用 Request 对象即可将请求当作独立的对象来看待，在特定的需求中可以直接操作 Request 对象，以便更加灵活地实现请求的调度以及其他操作。</p><p><a href="http://docs.python-requests.org/">requests 库官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;requests-库高级用法&quot;&gt;&lt;a href=&quot;#requests-库高级用法&quot; class=&quot;headerlink&quot; title=&quot;requests 库高级用法&quot;&gt;&lt;/a&gt;requests 库高级用法&lt;/h2&gt;&lt;p&gt;requests 库的基本用法有 GET、P</summary>
      
    
    
    
    <category term="requests" scheme="http://giyn.work/categories/requests/"/>
    
    
    <category term="requests" scheme="http://giyn.work/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>Multiple Dimensional Scaling 降维算法</title>
    <link href="http://giyn.work/posts/3a002fbb/"/>
    <id>http://giyn.work/posts/3a002fbb/</id>
    <published>2020-09-28T06:50:26.000Z</published>
    <updated>2020-09-28T07:11:19.627Z</updated>
    
    <content type="html"><![CDATA[<p>在高维情形下出现的数据样本稀疏、距离计算困难等问题，是所有机器学习方法共同面临的严重障碍，被称为“维数灾难” (curse ofdimensionality)。</p><p>缓解维数灾难的一个重要途径是降维 (dimension reduction)，亦称“维数约简”，即通过某种数学变换将原始高维属性空间转变为一个低维“子空间”(subspace)，在这个子空间中样本密度大幅提高，距离计算也变得更为容易。为什么能进行降维？这是因为在很多时候，人们观测或收集到的数据样本虽是高维的，但与学习任务密切相关的也许仅是某个低维分布，即高维空间中的一个低维“ 嵌入” (embedding)。下图给出了一个直观的例子。原始高维空间中的样本点，在这个低维嵌入子空间中更容易进行学习。</p><p><img src="https://img-blog.csdnimg.cn/20200819162849161.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>若要求原始空间中样本之间的距离在低维空间中得以保持，如上图所示，即得到“多维缩放” (Multiple Dimensional Scaling，简称 $MDS$ ) 这样一种经典的降维方法。下面做一个简单的介绍。</p><p>假定 $m$ 个样本在原始空间的距离矩阵为 $D∈\mathbb{R}^{m×m}$，其第 $i$ 行 $j$ 列的元素 $dist_{ij}$ 为样本 $x_i$ 到 $x_j$ 的距离。我们的目标是获得样本在 $d’$ 维空间的表示 $Z∈\mathbb{R}^{d’×m},d’≤d$，且任意两个样本在 $d’$ 维空间中的欧氏距离等于原始空间中的距离，即 $||z_i-z_j||=dist_{ij}$。</p><p>令 $B=Z^TZ∈\mathbb{R}^{m×m}$，其中 $B$ 为降维后样本的内积矩阵，$b_{ij}=z_i^Tz_j$，有</p><div>    $$\begin{aligned}\operatorname{dist}_{i j}^{2} &=\left\|z_{i}\right\|^{2}+\left\|z_{j}\right\|^{2}-2 z_{i}^{T} z_{j} \\&=b_{i i}+b_{j j}-2 b_{i j}\end{aligned}$$</div><blockquote><p>$0∈\mathbb{R}^{d’}$ 为全零向量。</p></blockquote><p>为便于讨论，令降维后的样本 $Z$ 被中心化，即 $\sum^m_{i=1}z_i=0$。显然，矩阵 $B$ 的行与列之和均为零，即 $\sum^m_{i=1}b_{ij}=\sum^m_{j=1}b_{ij}0$。易知</p><div>    $$\sum^m_{i=1}dist^2_{ij}=tr(B)+mb_{jj}\,\,,\tag{4}$$    $$\sum^m_{j=1}dist^2_{ij}=tr(B)+mb_{ii}\,\,,\tag{5}$$    $$\sum^m_{i=1}\sum^m_{j=1}dist^2_{ij}=2m\,tr(B)\,\,,\tag{6}$$</div><p>其中 $tr(·)$ 表示矩阵的迹 (trace)，$tr(B)=\sum^m_{i=1}||z_i||^2$。令</p><div>    $$dist_{i.}^2=\frac{1}{m}\sum^m_{j=1}dist_{ij}^2\,\,,\tag{7}$$    $$dist_{.j}^2=\frac{1}{m}\sum^m_{j=1}dist_{ij}^2\,\,,\tag{8}$$    $$dist_{..}^2=\frac{1}{m^2}\sum^m_{i=1}\sum^m_{j=1}dist_{ij}^2\,\,,\tag{9}$$</div><p>由式 (3) 和式 (4)~(9) 可得</p><div>    $$b_{ij}=-\frac{1}{2}(dist_{ij}^2-dist^2_{i.}-dist^2_{.j}+dist^2_{..})\,\,,\tag{10}$$</div><p>由此即可通过降维前后保持不变的距离矩阵 $D$ 求取内积矩阵 $B$。</p><p>对矩阵 $B$ 做特征值分解 (eigenvalue decomposition)，$B=Ⅴ\Lambda Ⅴ^T$，其中 $\Lambda= diag(λ_ 1,λ_ 2,…,\lambda_d)$ 为特征值构成的对角矩阵，$λ_ 1≥\lambda_2≥…≥\lambda_d$，$V$ 为特征向量矩阵。假定其中有 $d^*$ 个非零特征值，它们构成对角矩阵 $\Lambda_ * =diag(\lambda_1,\lambda_2,…,\lambda_{d^*})$。令 $Ⅴ _ *$ 表示相应的特征向量矩阵，则 $Z$ 可表达为</p><div>    $$Z=\Lambda_*^{1/2}Ⅴ^T_*∈\mathbb{R}^{d^*×m}\,\,.\tag{11}$$</div><p>在现实应用中为了有效降维，往往仅需降维后的距离与原始空间中的距离尽可能接近，而不必严格相等。此时可取 $d’\ll d$ 个最大特征值构成对角矩阵 $\tilde{\Lambda}=diag(\lambda_1,\lambda_2,…,\lambda_{d’})$，令 $\tilde{Ⅴ}$ 表示相应的特征向量矩阵，则 $Z$ 可表达为</p><div>    $$Z=\tilde{\Lambda}^{1/2}\tilde{Ⅴ}^T∈\mathbb{R}^{d'×m}\,\,.\tag{12}$$</div><p>下图给出了 $MDS$ 算法的描述：</p><p><img src="https://img-blog.csdnimg.cn/20200819162909635.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>一般来说，欲获得低维子空间，最简单的是对原始高维空间进行线性变换。给定 $d$ 维空间中的样本 $X=(x_1,x_2,…,x_m)∈\mathbb{R}^{d×m}$，变换之后得到 $d’≤d$ 维空间中的样本</p><div>    $$Z=W^TX\,\,,\tag{13}$$</div><blockquote><p>通常令 $d’\ll d$。</p></blockquote><p>其中 $W∈\mathbb{R}^{d×d’}$ 变换矩阵，$Z∈R^{d’×m}$ 是样本在新空间中的表达。</p><p>变换矩阵 $W$ 可视为 $d’$ 个 $d$ 维基向量，$z_i=W^Tx_i$ 是第 $i$ 个样本与这 $d’$ 个基向量分别做内积而得到的 $d’$ 维属性向量。换言之，$z_i$ 是原属性向量 $x_i$ 在新坐标系 ${w_1,w_2,…,w_{d’}}$ 中的坐标向量。若 $w_i$ 与 $w_j(i≠j)$ 正交，则新坐标系是一个正交坐标系，此时 $W$ 为正交变换。显然，新空间中的属性是原空间中属性的线性组合。</p><p>基于线性变换来进行降维的方法称为线性降维方法，它们都符合式 (13) 的基本形式，不同之处是对低维子空间的性质有不同的要求，相当于对 $W$ 施加了不同的约束。在下一节我们将会看到，若要求低维子空间对样本具有最大可分性,则将得到一种极为常用的线性降维方法。</p><p>对降维效果的评估，通常是比较降维前后学习器的性能，若性能有所提高则认为降维起到了作用。若将维数降至二维或三维，则可通过可视化技术来直观地判断降维效果。</p><hr><p>Reference：《机器学习》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在高维情形下出现的数据样本稀疏、距离计算困难等问题，是所有机器学习方法共同面临的严重障碍，被称为“维数灾难” (curse ofdimensionality)。&lt;/p&gt;
&lt;p&gt;缓解维数灾难的一个重要途径是降维 (dimension reduction)，亦称“维数约简”，即</summary>
      
    
    
    
    <category term="MachineLearning" scheme="http://giyn.work/categories/MachineLearning/"/>
    
    
    <category term="MachineLearning" scheme="http://giyn.work/tags/MachineLearning/"/>
    
    <category term="Dimensionality Reduction" scheme="http://giyn.work/tags/Dimensionality-Reduction/"/>
    
  </entry>
  
  <entry>
    <title>Bagging 和随机森林算法</title>
    <link href="http://giyn.work/posts/3f56ccc4/"/>
    <id>http://giyn.work/posts/3f56ccc4/</id>
    <published>2020-09-28T06:47:32.000Z</published>
    <updated>2020-09-28T07:12:10.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bagging-与随机森林"><a href="#Bagging-与随机森林" class="headerlink" title="$Bagging$ 与随机森林"></a>$Bagging$ 与随机森林</h2><p>由个体与集成的知识可知，欲得到泛化性能强的集成，集成中的个体学习器应尽可能相互独立；虽然“独立”在现实任务中无法做到，但可以设法使基学习器尽可能具有较大的差异。给定一个训练数据集，一种可能的做法是对训练样本进行采样，产生出若干个不同的子集，再从每个数据子集中训练出一个基学习器。这样，由于训练数据不同，我们获得的基学习器可望具有比较大的差异。然而，为获得好的集成，我们同时还希望个体学习器不能太差。如果采样出的每个子集都完全不同，则每个基学习器只用到了一小部分训练数据，甚至不足以进行有效学习，这显然无法确保产生出比较好的基学习器。为解决这个问题，我们可考虑使用相互有交叠的采样子集。</p><hr><h3 id="Bagging"><a href="#Bagging" class="headerlink" title="$Bagging$"></a>$Bagging$</h3><blockquote><p>$Bagging$ 这个名字是由 $Bootstrap,AGGregatING$ 缩写而来。</p></blockquote><p>$Bagging$ 是并行式集成学习方法最著名的代表。从名字即可看出，它直接基于自助采样法(bootstrap sampling)。给定包含 $m$ 个样本的数据集，我们先随机取出一个样本放入采样集中，再把该样本放回初始数据集，使得下次采样时该样本仍有可能被选中，这样，经过 $m$ 次随机采样操作，我们得到含 $m$ 个样本的采样集，初始训练集中有的样本在采样集里多次出现，有的则从未出现。它的特点是各个弱学习器之间没有依赖关系，可以并行拟合，而且是随机采样。</p><blockquote><p>随机采样就是从训练集里采集固定个数的样本，但是每采集一个样本后，都将样本放回。</p></blockquote><p>照这样，我们可采样出 $T$ 个含 $m$ 个训练样本的采样集，然后基于每个采样集训练出一个基学习器，再将这些基学习器进行结合。这就是 $Bagging$ 的基本流程。<strong>在对预测输出进行结合时，$Bagging$ 通常对分类任务使用简单投票法，对回归任务使用简单平均法。</strong>若分类预测时出现两个类收到同样票数的情形，则最简单的做法是随机选择一个，也可进一步考察学习器投票的置信度来确定最终胜者。$Bagging$ 的算法描述如下图所示。</p><blockquote><p>即每个基学习器使用相同权重的投票、平均。</p></blockquote><img src="https://img-blog.csdnimg.cn/2020080310055683.png" width="60%" loading="lazy"><blockquote><p>$D_{bs}$ 是自助采样产生的样本分布。</p></blockquote><hr><h4 id="Bagging-的优点："><a href="#Bagging-的优点：" class="headerlink" title="$Bagging$ 的优点："></a>$Bagging$ 的优点：</h4><ul><li><p>训练一个 $Bagging$ 集成与直接使用基学习算法训练一个学习器的复杂度同阶，这说明 $Bagging$ 是一个很高效的集成学习算法。</p><blockquote><p>假定基学习器的计算复杂度为 $O(m)$，则 $Bagging$ 的复杂度大致为 $T(O(m)+O(s))$，考虑到采样与投票/平均过程的复杂度 $O(s)$很小，而 $T$ 通常是一个不太大的常数。</p></blockquote></li><li><p>与标准 $AdaBoost$ 只适用于二分类任务不同，$Bagging$ 能不经修改地用于多分类、回归等任务。</p></li><li><p>自助采样过程还给 $Bagging$ 带来了另一个优点：由于每个基学习器只使用了初始训练集中约 $63.2%$ 的样本，剩下约 $36.8%$ 的样本可用作验证集来对泛化性能进行“包外估计”(out-of-bag estimate)。为此需记录每个基学习器所使用的训练样本。</p></li><li><p>由于 $Bagging$ 算法每次都进行采样来训练模型，因此泛化能力很强，对于降低模型的方差很有作用。当然对于训练集的拟合程度就会差一些。</p></li></ul><p>不妨令 $D_t$ 表示 $h_t$ 实际使用的训练样本集，令 $H^{oob}(x)$ 表示对样本 $x$ 的包外预测，即仅考虑那些未使用 $x$ 训练的基学习器在 $x$ 上的预测，有</p><div>    $$H^{oob}(x)=\arg\limits_{y∈γ}\max\sum^T_{t=1}Ⅱ(h_t(x)=y)\,·\,Ⅱ(x\notin D_t)\,\,,\tag{1}$$</div><p>则 $Bagging$ 泛化误差的包外估计为</p><div>    $$\epsilon^{oob}=\frac{1}{|D|}\sum_{(x,y)\in D}Ⅱ(H^{oob}(x)\neq y)\,\,.\tag{2}$$</div><p>事实上，包外样本还有许多其他用途：</p><ul><li>当基学习器是决策树时，可使用包外样本来辅助剪枝，或用于估计决策树中各结点的后验概率以辅助对零训练样本结点的处理；</li><li>当基学习器是神经网络时，可使用包外样本来辅助早期停止以减小过拟合风险。</li></ul><p>从偏差方差分解的角度看，$Bagging$ 主要关注降低方差，因此它在不剪枝决策树、神经网络等易受样本扰动的学习器上效用更为明显。</p><hr><h3 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h3><p>随机森林（Random Forest，简称RF）是 $Bagging$ 的一个扩展变体。$RF$ 在以决策树为基学习器构建 $Bagging$ 集成的基础上，进一步在决策树的训练过程中引入了随机属性选择。具体来说，传统决策树在选择划分属性时是在当前结点的属性集合(假定有 $d$ 个属性)中选择一个最优属性；而在 $RF$ 中，对基决策树的每个结点，先从该结点的属性集合中随机选择一个包含 $k$ 个属性的子集，然后再从这个子集中选择一个最优属性用于划分。</p><blockquote><p>这里的参数 $k$ 控制了随机性的引入程度：若令 $k=d$，则基决策树的构建与传统决策树相同；若令 $k= 1$，则是随机选择一个属性用于划分；一般情况下，推荐值 $k= log_2d$。</p></blockquote><p>随机森林简单、容易实现、计算开销小，令人惊奇的是，它在很多现实任务中展现出强大的性能，被誉为“代表集成学习技术水平的方法”。可以看出，随机森林对 $Bagging$ 只做了小改动，但是与 $Bagging$ 中基学习器的“多样性”仅通过样本扰动（通过对初始训练集采样）而来不同，随机森林中基学习器的多样性不仅来自样本扰动，还来自属性扰动，这就使得最终集成的泛化性能可通过个体学习器之间差异度的增加而进一步提升。</p><p>随机森林的收敛性与 $Bagging$ 相似。如下图所示，随机森林的起始性能往往相对较差，特别是在集成中只包含一个基学习器时。这很容易理解，因为通过引入属性扰动，随机森林中个体学习器的性能往往有所降低。然而，随着个体学习器数目的增加，随机森林通常会收敛到更低的泛化误差。值得一提的是，随机森林的训练效率常优于 $Bagging$，因为在个体决策树的构建过程中，$Bagging$ 使用的是“确定型”决策树，在选择划分属性时要对结点的所有属性进行考察，而随机森林使用的“随机型”决策树则只需考察一个属性子集。</p><img src="https://img-blog.csdnimg.cn/20200803100913113.png" width="70%" loading="lazy"><hr><h4 id="随机森林的主要优点："><a href="#随机森林的主要优点：" class="headerlink" title="随机森林的主要优点："></a>随机森林的主要优点：</h4><ul><li>训练可以高度并行化。</li><li>由于可以随机选择决策树节点划分特征，这样在样本特征维度很高的时候，仍然能高效的训练模型。</li><li>在训练后，可以给出各个特征对于输出的重要性。</li><li>由于采用了随机采样，训练出的模型的方差小，泛化能力强。</li><li>相对于 $Boosting$ 系列的 $Adaboost$ 和 $GBDT$ ，$RF$ 实现比较简单。</li><li>对部分特征缺失不敏感。</li></ul><h4 id="随机森林的主要缺点："><a href="#随机森林的主要缺点：" class="headerlink" title="随机森林的主要缺点："></a>随机森林的主要缺点：</h4><ul><li>在某些噪音比较大的样本集上，随机森林模型容易陷入过拟合。</li><li>取值划分比较多的特征容易对随机森林的决策产生更大的影响，从而影响拟合的模型的效果。</li></ul><blockquote><p>随机森林需要调整的参数有：</p><ul><li>决策树的个数</li><li>特征属性的个数</li><li>递归次数（决策树的深度）</li></ul></blockquote><hr><p>Reference：《机器学习》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Bagging-与随机森林&quot;&gt;&lt;a href=&quot;#Bagging-与随机森林&quot; class=&quot;headerlink&quot; title=&quot;$Bagging$ 与随机森林&quot;&gt;&lt;/a&gt;$Bagging$ 与随机森林&lt;/h2&gt;&lt;p&gt;由个体与集成的知识可知，欲得到泛化性能强的集</summary>
      
    
    
    
    <category term="MachineLearning" scheme="http://giyn.work/categories/MachineLearning/"/>
    
    
    <category term="MachineLearning" scheme="http://giyn.work/tags/MachineLearning/"/>
    
    <category term="Bagging" scheme="http://giyn.work/tags/Bagging/"/>
    
    <category term="RandomForest" scheme="http://giyn.work/tags/RandomForest/"/>
    
  </entry>
  
  <entry>
    <title>决策树算法原理</title>
    <link href="http://giyn.work/posts/748a96c4/"/>
    <id>http://giyn.work/posts/748a96c4/</id>
    <published>2020-09-28T05:54:27.000Z</published>
    <updated>2020-10-07T13:34:09.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是决策树？"><a href="#什么是决策树？" class="headerlink" title="什么是决策树？"></a>什么是决策树？</h2><p>决策树是一种逻辑简单的机器学习算法，可用作分类，也可用作回归，属于监督学习（Supervised learning）。</p><p>决策树的模型表达式 f(x) 很难被写出，却很容易被画出</p><h3 id="决策树是一种树形结构："><a href="#决策树是一种树形结构：" class="headerlink" title="决策树是一种树形结构："></a>决策树是一种树形结构：</h3><blockquote><h6 id="树形结构："><a href="#树形结构：" class="headerlink" title="树形结构："></a>树形结构：</h6><p><strong>①结点+有向边</strong><br><strong>②没有回路，根结点为始、叶子结点为终</strong></p></blockquote><img src="https://img-blog.csdnimg.cn/20200424102622422.png" width="30%" loading="lazy"><p><strong>或者这么画：</strong></p><img src="https://img-blog.csdnimg.cn/20200424102640336.png" width="40%" loading="lazy"><pre><code>根节点：包含样本的全集内部节点：对应特征属性测试叶节点：代表决策的结果</code></pre><h3 id="决策树学习的步骤："><a href="#决策树学习的步骤：" class="headerlink" title="决策树学习的步骤："></a>决策树学习的步骤：</h3><ol><li><p><strong>特征选择</strong><br>根据信息增益的准则，筛选出跟分类结果相关性较高的特征，也就是分类能力较强的特征。</p></li><li><p><strong>决策树生成及分裂</strong><br>从根节点开始，对每个节点计算所有特征的信息增益，选择信息增益最大的特征作为节点特征，根据该特征的不同取值建立子节点；然后对每个子节点使用相同的方式生成新的子节点，直到信息增益很小或者没有特征可以选择为止。</p></li><li><p><strong>决策树剪枝</strong><br>主动去掉部分分支，防止过拟合。</p></li></ol><h3 id="决策树的分裂（决策）："><a href="#决策树的分裂（决策）：" class="headerlink" title="决策树的分裂（决策）："></a>决策树的分裂（决策）：</h3><img src="https://img-blog.csdnimg.cn/20200424105433997.png" width="20%" loading="lazy"><p><strong>根据 <code>分裂的特征 x</code> 和 <code>分裂的阈值 a</code> 进行分裂，即进行一次决策。然后由判断结果决定进入哪个分支节点，直至到达叶节点处，得到分类结果。</strong></p><blockquote><p>在构建决策树模型时，我们无法得知参数数量，而是采用启发式算法。</p></blockquote><h3 id="启发式算法："><a href="#启发式算法：" class="headerlink" title="启发式算法："></a>启发式算法：</h3><ol><li><strong>将所有的训练数据都放在根结点中。</strong></li><li><strong>选择一个当前的最优决策，将根结点的数据分割成子集。</strong></li><li><strong>对每个子集，选择一个子集的最优决策，得到子集的子集。</strong></li><li><strong>递归执行，直到各个子集都有较好的分类时结束。</strong></li></ol><h3 id="最优决策："><a href="#最优决策：" class="headerlink" title="最优决策："></a>最优决策：</h3><blockquote><p>分类树决策的优劣用熵来衡量。</p></blockquote><img src="https://img-blog.csdnimg.cn/20200424110907282.png" width="30%" loading="lazy"><img src="https://img-blog.csdnimg.cn/20200424111253350.png" width="30%" loading="lazy"><h4 id="决策树的损失函数就是条件熵"><a href="#决策树的损失函数就是条件熵" class="headerlink" title="决策树的损失函数就是条件熵"></a><code>决策树的损失函数就是条件熵</code></h4><h3 id="决策树算法的分类："><a href="#决策树算法的分类：" class="headerlink" title="决策树算法的分类："></a>决策树算法的分类：</h3><ul><li><strong>ID3</strong></li><li><strong>C4.5</strong></li><li><strong>CART</strong></li></ul><p>ID3 算法的思路：信息增益最大化<br><code>信息增益 = 熵 - 条件熵</code></p><p>C4.5 算法的思路：信息增益率最大化<br><code>信息增益率 = 信息增益 / 熵</code></p><blockquote><p>ID3 算法和 C4.5算法 的区别仅在于信息增益和信息增益率。</p></blockquote><h3 id="决策树算法的优缺点："><a href="#决策树算法的优缺点：" class="headerlink" title="决策树算法的优缺点："></a>决策树算法的优缺点：</h3><ul><li>优点：计算复杂度不高，输出结果易于理解，对中间值的缺失不敏感，可以处理不相关特征数据。</li><li>缺点：可能会产生过度匹配问题。</li><li>适用数据类型：数值型和标称型。</li></ul><h2 id="什么是-ID3-算法？"><a href="#什么是-ID3-算法？" class="headerlink" title="什么是 $ID3$ 算法？"></a>什么是 $ID3$ 算法？</h2><p>$ID3$ 算法是构建决策树模型的一种常用方法，根据信息增益来选择特征。</p><h3 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h3><p>“信息熵”是度量样本集合纯度最常用的一种指标，假定当前样本集合 $D$ 中第 $k$ 类样本所占的比例为$P_k (k=1,2,…,|y|)$，则 $D$ 的信息熵定义为：</p><div>    $$Ent(D)=-\sum^{|y|}_{k=1}p_klog_2p_k$$</div><p>$Ent(D)$ 的值越小，则 $D$ 的纯度越高。</p><p>假定离散属性 $a$ 有 $V$ 个可能的取值 ${a^1,a^2, …,a^V}$ ，若使用 $a$ 来对样本集 $D$ 进行划分，则会产生 $V$ 个分支结点，其中第 $v$ 个分支结点包含了 $D$ 中所有在属性 $a$ 上取值为 $a^v$ 的样本，记为 $D^v$ 。我们可根据式（4.1）计算出 $D^v$ 的信息熵，再考虑到不同的分支结点所包含的样本数不同，给分支结点赋予权重 $|D^v|/|D|$，即样本数越多的分支结点对提升纯度的帮助越大，于是可计算出用属性 $a$ 对样本集 $D$ 进行划分所获得的“信息增益”，<strong>求和项也称为“条件熵”</strong>：</p><div>    $$Gain(D,a)=Ent(D)-\sum^V_{v=1}\frac{|D^v|}{|D|}Ent(D^v)$$</div><p>一般地，信息增益越大，则使用属性 $a$ 来进行划分所获得的“纯度提升”越大。因此可用信息增益来进行决策树的划分属性选择，即在决策树算法中选择属性 $a_* = arg_{a∈A}max Gain(D,a)$。</p><p><strong>$ID3$ 算法就是以信息增益为准则来选择划分属性。</strong></p><h3 id="ID3-算法的步骤："><a href="#ID3-算法的步骤：" class="headerlink" title="$ID3$ 算法的步骤："></a>$ID3$ 算法的步骤：</h3><pre><code>参数：训练集 D，特征集 A，阈值 ε返回：决策树 T</code></pre><ol><li>若 $D$ 中全部实例同属一类 $C$，则用 $C$ 作为该结点的标注，返回 $T$。（异常处理）</li><li>若 $A$ 为空，则将 $D$ 中实例数最多的类 $C$ 作为该结点的标注，并返回 $T$。（异常处理）</li><li>计算 $A$ 中每个特征对 $D$ 的信息增益，并选择信息增益最大的特征 $a$。（最优决策）</li><li>如果 $a$ 带来的信息增益小于阈值 $e$，则将 $D$ 中实例数最多的类 $C$ 作为该结点的标注，并返回 $T$ 。</li><li>对特征 $a$ 的每个可能取值 $a_i$，将数据集 $D$ 分割为几个子集 $D_i$ 构建子节点，由结点、子结点、$a$、每个 $a_i$ 构建决策树 $T$。</li><li>对每个子集，以 $D_i$ 为数据集，以 $A- {a}$ 为特征集，递归调用1~5步。</li></ol><h2 id="什么是-C4-5-算法？"><a href="#什么是-C4-5-算法？" class="headerlink" title="什么是 $C4.5$ 算法？"></a>什么是 $C4.5$ 算法？</h2><h6 id="C4-5-算法是基于-ID3-算法的改良，-C4-5-算法不直接使用信息增益，而是使用“信息增益率”来选择最优划分属性。"><a href="#C4-5-算法是基于-ID3-算法的改良，-C4-5-算法不直接使用信息增益，而是使用“信息增益率”来选择最优划分属性。" class="headerlink" title="$C4.5$ 算法是基于 $ID3$ 算法的改良，$C4.5$ 算法不直接使用信息增益，而是使用“信息增益率”来选择最优划分属性。"></a>$C4.5$ 算法是基于 $ID3$ 算法的改良，$C4.5$ 算法不直接使用信息增益，而是使用“信息增益率”来选择最优划分属性。</h6><h6 id="基于-ID3-算法的优化："><a href="#基于-ID3-算法的优化：" class="headerlink" title="基于 $ID3$ 算法的优化："></a>基于 $ID3$ 算法的优化：</h6><pre><code>1) 用信息增益率来选择属性，克服了用信息增益选择属性时偏向选择取值多的属性的不足；2) 在树构造过程中进行剪枝；3) 能够完成对连续属性的离散化处理；4) 能够对不完整数据进行处理。</code></pre><h3 id="信息增益率"><a href="#信息增益率" class="headerlink" title="信息增益率"></a>信息增益率</h3><p>信息增益准则对可取值数目较多的属性有所偏好，然而这样的决策树显然不具有泛化能力，无法对新样本进行有效预测。而 $C4.5$ 算法不直接使用信息增益，而是使用“信息增益率”来选择最优划分属性，假定当前样本集合为 $D$，信息增益率定义为：</p><div>    $$Gain\_ratio(D,a)=\frac{Gain(D,a)}{IV(a)}$$</div><p>其中</p><div>    $$IV(a)=-\sum^V_{v=1}\frac{|D^v|}{|D|}log_2\frac{|D^v|}{|D|}$$</div><p>称为属性 $a$ 的“固有值”。它的定义与信息熵类似，信息熵衡量的是样本集在类别上的混乱程度，而 <strong>固有值衡量的是样本集在某个属性上的混乱程度</strong>。若属性 $a$ 的可能取值数目 $V$ 越大，$IV(a)$ 的值通常会越大，即该属性混乱程度越高。</p><p>需要注意的是，信息增益率准则对可取值数目较少的属性有所偏好。因此，$C4.5$ 算法并不是直接选择信息增益率最大的候选划分属性，而是使用了一个启发式：<strong>先从候选划分属性中找出信息增益高于平均水平的属性，再从中选择增益率最高的</strong>。</p><h6 id="C4-5-的不足之处："><a href="#C4-5-的不足之处：" class="headerlink" title="$C4.5$ 的不足之处："></a>$C4.5$ 的不足之处：</h6><ul><li>$C4.5$ 生成的是多叉树，一个父节点可以有多个子节点，运算效率没有二叉树高；</li><li>$C4.5$ 使用了熵模型，里面有大量的对数运算。如果有连续值的属性，还涉及到排序运算，运算量很大。</li></ul><h2 id="CART-算法"><a href="#CART-算法" class="headerlink" title="$CART$ 算法"></a>$CART$ 算法</h2><p>$CART$（Classification and Regression Tree，即分类回归树算法）是一种著名的决策树学习算法，可用于分类和回归任务。</p><p>$CART$ 算法使用“基尼指数”来选择划分属性。</p><h3 id="基尼指数"><a href="#基尼指数" class="headerlink" title="基尼指数"></a>基尼指数</h3><p>假定当前样本集合 $D$ 中第 $k$ 类样本所占的比例为$P_k (k=1,2,…,|y|)$。</p><p>数据集 $D$ 的纯度可用基尼值来度量：</p><div>    $$Gini(D)=\sum^{|y|}_{k=1}\sum_{k'≠k}p_kp_{k'}=\sum^{|y|}_{k=1}p_k(1-p_k)=1-\sum^{|y|}_{k=1}p^2_k$$</div><p>直观来说，**$Gini(D)$ 反映了从数据集 $D$ 中随机抽取 $2$ 个样本，其类别标记不一致的概率**。因此，$Gini(D) $ 越小，基尼值越小，则数据集 $D$ 的纯度越高。属性 $α$ 的基尼指数定义：</p><div>    $$Gini\_index(D,a)=\sum^V_{v=1}\frac{|D^v|}{|D|}Gini(D^v)$$</div><p>基尼指数越小，表示使用属性 $a$ 划分后纯度的提升越大。因此，在属性集合 $A$ 中，选择基尼指数最小的属性 $a$ 作为最优划分属性，即 $a_*=arg_{a∈A}minGini_index(D,a)$。</p><h4 id="CART-算法中主要分为两个步骤"><a href="#CART-算法中主要分为两个步骤" class="headerlink" title="$CART$ 算法中主要分为两个步骤"></a>$CART$ 算法中主要分为两个步骤</h4><ol><li><p>将样本递归划分进行建树过程</p></li><li><p>用验证数据进行剪枝</p></li></ol><p>Reference：《机器学习》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是决策树？&quot;&gt;&lt;a href=&quot;#什么是决策树？&quot; class=&quot;headerlink&quot; title=&quot;什么是决策树？&quot;&gt;&lt;/a&gt;什么是决策树？&lt;/h2&gt;&lt;p&gt;决策树是一种逻辑简单的机器学习算法，可用作分类，也可用作回归，属于监督学习（Supervised l</summary>
      
    
    
    
    <category term="MachineLearning" scheme="http://giyn.work/categories/MachineLearning/"/>
    
    
    <category term="MachineLearning" scheme="http://giyn.work/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>GBDT 模型简介及数学推导</title>
    <link href="http://giyn.work/posts/c9d19075/"/>
    <id>http://giyn.work/posts/c9d19075/</id>
    <published>2020-09-27T06:44:30.000Z</published>
    <updated>2020-09-29T13:25:55.134Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是-GBDT-？"><a href="#什么是-GBDT-？" class="headerlink" title="什么是 $GBDT$ ？"></a>什么是 $GBDT$ ？</h4><p>$GBDT$ 是机器学习领域中浅层模型的优秀模型，也是各大数据挖掘比赛中经常出现的框架，其全称是 $Gradient Boosting Decision Tree$，中文名是梯度提升树。</p><hr><h4 id="Boosting"><a href="#Boosting" class="headerlink" title="$Boosting$"></a>$Boosting$</h4><p>$Boosting$ 是一族可将弱学习器提升为强学习器的算法。这族算法的工作机制类似：先从初始训练集训练出一个基学习器，再根据基学习器的表现对训练样本分布进行调整，使得先前基学习器做错的训练样本在后续受到更多关注，然后基于调整后的样本分布来训练下一个基学习器；如此重复进行，直至基学习器数目达到事先指定的值 $T$，最终将这 $T$ 个基学习器进行加权结合。</p><hr><h4 id="GBDT-的损失函数："><a href="#GBDT-的损失函数：" class="headerlink" title="$GBDT$ 的损失函数："></a>$GBDT$ 的损失函数：</h4><blockquote><p>$Boosting$ 的模型是个迭代多轮的加法模型。$Boosting$ 每轮迭代输出的是一个基模型 $f_m(x)$，其中 $m$ 表示第 $m$ 轮迭代。最终，每轮迭代输出的模型经过加法求和，就得到了最终 $Boosting$ 模型的输出，也就是：$$y=\sum^{M}_{m=1}f_m(x)$$</p></blockquote><p>$GBDT$ 模型的基模型为 $DT$（决策树），即对于 $GBDT$ 下的每轮迭代，输出的 $f_m(x)$ 为决策树。而最终的 $GBDT$ 模型为所有决策树输出结果之和。$Boosting$ 的基模型采用的都是弱模型，因此，通常 $GBDT$ 基模型的决策树树深不会太深（一般少于 $5$ 层），这些可以在实际实现中灵活处理。</p><p>回归决策树的 <strong>损失函数</strong> 采用平方误差，$GBDT$ 也可以保持一致。平方误差的公式为：</p><div>    $$L(w)=\sum^n_{i=1}(\hat{y}_i-y_i)^2\tag{1}$$</div><p>此处的模型和损失函数都是参数 $w$ 的函数，参数 $w$ 为每个基模型的每个分裂特征和每个分裂阈值。</p><p>考虑此时要最优化的目标变量是什么，此处可以从损失函数入手，对于损失函数中的预测值 $y_i$ 有：</p><div>    $$y_i=\sum_{m=1}^Mf_m(x_i)=\sum^{M-1}_{m=1}f_m(x_i)+f_M(x_i)\tag{2}$$</div><p>将 $(2)$ 式代入 $(1)$ 式，得：</p><div>    $$L(w)=\sum^n_{i=1}(\hat{y}_i-y_i)^2=\sum^n_{i=1}(\hat{y}_i-\sum^{M-1}_{m=1}f_m(x_i)-f_M(x_i))^2\tag{3}$$</div><p>观察式 $(3)$，发现损失函数中有 $3$ 项。第一项是真实值，第二项是截止到第 $M-1$ 棵树的预测值，第三项是第 $M$ 棵树的输出结果，若令：</p><div>    $$r_i=\hat{y}_i-\sum^{M-1}_{m=1}f_m(x_i)\tag{4}$$</div><p>表示的是，在训练第 $M$ 棵树时，截止到当前的残差值（误差），把 $(4)$ 代入 $(3)$，有：</p><div>    $$L(w)=\sum^n_{i=1}(r_i-f_M(x_i))^2\tag{5}$$</div><p>该公式表明，为了让损失函数数值最小，在训练某个基模型时，其训练目标是<strong>去拟合残差 $r_i$。</strong></p><hr><h4 id="GBDT-的最优化求解"><a href="#GBDT-的最优化求解" class="headerlink" title="$GBDT$ 的最优化求解"></a>$GBDT$ 的最优化求解</h4><p>上述讨论是基于损失函数为平方误差的情况。一般地，如果损失函数不是平方误差，则每个基模型的训练目标就不是残差。$GBDT$ 利用损失函数的负梯度在当前模型的值作为残差的近似值，即：</p><div>    $$r_i≈-\bigg[\frac{∂L(w)}{∂f_{M-1}(x)}\bigg]\tag{6}$$</div><p>特别地，当损失函数采用平方误差时，损失函数的负梯度就是先前推导的残差：</p><div>    $$-\bigg[\frac{∂L(w)}{∂f_{M-1}(x)}\bigg]=\hat{y}_i-\sum^{M-1}_{m=1}f_m(x_i)\tag{7}$$</div><p>假设有一个回归问题，特征只有一个维度，取值范围为 $1$ ～ $5$ 的自然数，样本对应的真实值取值为 $-1$ ～ $1$ 的自然数。现利用 $GBDT$ 算法建立模型，假设基模型采用树深为 $1$ 的 $CART$ 回归树算法，损失函数采用平方误差函数，则残差公式为：</p><div>    $$r_i=-\bigg[\frac{∂L(w)}{∂f_{M-1}(x)}\bigg]=\hat{y}_i-\sum^{M-1}_{m=1}f_m(x_i)\tag{8}$$</div><p>建模通过多轮迭代，每一轮都学习一棵 $CART$ 树，学习的目标是残差。对于只有 $1$ 层结点的 $CART$ 树建模，采用选择平方误差最小的分裂点和阈值即可。第一轮输出结果为：<br><img src="https://img-blog.csdnimg.cn/2020080116372072.png" alt="在这里插入图片描述" loading="lazy"><br>经过第一轮的模型，对每个样本计算出残差表如下：</p><table><thead><tr><th>样本序号</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>特征 x</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>真实值 y</td><td>-1</td><td>1</td><td>1</td><td>-1</td><td>1</td></tr><tr><td>预测值 $\hat{y_i}$</td><td>-1</td><td>0.5</td><td>0.5</td><td>0.5</td><td>0.5</td></tr><tr><td>残差值 $r_i$</td><td>0</td><td>0.5</td><td>0.5</td><td>-1.5</td><td>0.5</td></tr></tbody></table><p>第二轮建模以残差值 $r_i$ 为标签，构建模型 $r_i=f(x)$  的一层 $CART$ 回归树，则有：<br><img src="https://img-blog.csdnimg.cn/20200801164107430.png" alt="在这里插入图片描述" loading="lazy"><br>第二轮建模之后的模型如下。同样可以计算残差，并进行第三轮的建模：<br><img src="https://img-blog.csdnimg.cn/20200801164138818.png" alt="在这里插入图片描述" loading="lazy"><br>重复上述过程 $5$ 次后，得到模型。</p><p>以 $x=2$ 为例代入模型，则每个树的输出结果分别为：$0.5$、$0.33$、$-0.25$、$0.25$、$-0.09$，最终预测结果为 $y=0.74$ 。<br><img src="https://img-blog.csdnimg.cn/20200801164312916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><hr><p>对于 $GBDT$ 而言，弱模型可以采用浅层的 $CART$ 树，而提升方法则是一个逐步迭代的加法模型，对于每轮的迭代，采用<strong>损失函数的负梯度</strong>作为学习目标：</p><div>    $$r_i≈-\bigg[\frac{∂L(w)}{∂f_{M-1}(x)}\bigg]\tag{9}$$</div><p>至此，得到 $GBDT$ 模型。</p><hr><p>Reference：<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=15#/detail/pc?id=225">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=15#/detail/pc?id=225</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是-GBDT-？&quot;&gt;&lt;a href=&quot;#什么是-GBDT-？&quot; class=&quot;headerlink&quot; title=&quot;什么是 $GBDT$ ？&quot;&gt;&lt;/a&gt;什么是 $GBDT$ ？&lt;/h4&gt;&lt;p&gt;$GBDT$ 是机器学习领域中浅层模型的优秀模型，也是各大数据挖掘比</summary>
      
    
    
    
    <category term="MachineLearning" scheme="http://giyn.work/categories/MachineLearning/"/>
    
    
    <category term="MachineLearning" scheme="http://giyn.work/tags/MachineLearning/"/>
    
    <category term="GBDT" scheme="http://giyn.work/tags/GBDT/"/>
    
  </entry>
  
  <entry>
    <title>什么是推荐系统？</title>
    <link href="http://giyn.work/posts/152fc689/"/>
    <id>http://giyn.work/posts/152fc689/</id>
    <published>2020-09-26T03:21:48.000Z</published>
    <updated>2020-09-27T12:16:12.641Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是推荐系统？"><a href="#什么是推荐系统？" class="headerlink" title="什么是推荐系统？"></a>什么是推荐系统？</h3><p>随着信息技术和互联网的发展，人们逐渐从信息匮乏的时代走人了信息过载（informationoverload）的时代。</p><p>推荐系统就是解决信息过载的重要工具。它的任务是联系用户和信息，一方面帮助用户发现对自己有价值的信息；另一方面让信息能够展现在对它感兴趣的用户面前，从而实现信息消费者和信息生产者的双赢。</p><hr><h3 id="推荐系统的应用"><a href="#推荐系统的应用" class="headerlink" title="推荐系统的应用"></a>推荐系统的应用</h3><p>电子商务、电影和视频网站、个性化音乐网络电台、社交网络、个性化阅读、广告等等。</p><hr><h3 id="推荐系统的分类"><a href="#推荐系统的分类" class="headerlink" title="推荐系统的分类"></a>推荐系统的分类</h3><table><thead><tr><th>根据实时性分类</th><th>根据推荐是否个性化分类</th><th>根据推荐原则分类</th><th>根据数据源分类</th></tr></thead><tbody><tr><td>离线推荐</td><td>基于统计的推荐</td><td>基于相似度的推荐</td><td>基于人口统计学的推荐</td></tr><tr><td>实时推荐</td><td>个性化推荐</td><td>基于知识的推荐</td><td>基于内容的推荐</td></tr><tr><td></td><td></td><td>基于模型的推荐</td><td>基于协同过滤的推荐</td></tr></tbody></table><blockquote><p>协同过滤（英语：Collaborative Filtering，简称CF），简单来说是利用某兴趣相投、拥有共同经验之群体的喜好来推荐用户感兴趣的信息，个人透过合作的机制给予信息相当程度的回应（如评分）并记录下来以达到过滤的目的进而帮助别人筛选信息，回应不一定局限于特别感兴趣的，特别不感兴趣信息的纪录也相当重要。——维基百科</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是推荐系统？&quot;&gt;&lt;a href=&quot;#什么是推荐系统？&quot; class=&quot;headerlink&quot; title=&quot;什么是推荐系统？&quot;&gt;&lt;/a&gt;什么是推荐系统？&lt;/h3&gt;&lt;p&gt;随着信息技术和互联网的发展，人们逐渐从信息匮乏的时代走人了信息过载（informationo</summary>
      
    
    
    
    <category term="RecommenderSystem" scheme="http://giyn.work/categories/RecommenderSystem/"/>
    
    
    <category term="RecommenderSystem" scheme="http://giyn.work/tags/RecommenderSystem/"/>
    
  </entry>
  
  <entry>
    <title>使用 Selenium 爬取美团网大学城美食并存入 MongoDB 数据库</title>
    <link href="http://giyn.work/posts/2bca3d7b/"/>
    <id>http://giyn.work/posts/2bca3d7b/</id>
    <published>2020-09-26T03:14:11.000Z</published>
    <updated>2021-01-29T03:33:01.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Selenium是什么？"><a href="#Selenium是什么？" class="headerlink" title="Selenium是什么？"></a>Selenium是什么？</h3><p>Selenium 是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面源代码，做到可见即可爬。对于一些使用 JavaScript 动态渲染的页面来说，此种抓取方式非常有效。</p><hr><h3 id="Selenium-适用场景"><a href="#Selenium-适用场景" class="headerlink" title="Selenium 适用场景"></a>Selenium 适用场景</h3><p>在网络爬虫中，有的网页可以直接用 requests 来爬取，有的可以直接通过分析 Ajax 来爬取，不同的网站类型有其适用的爬取方法。</p><p>而对于带有 JavaScript 渲染的网页，多数情况下是无法直接用 requests 爬取网页源码的，虽然有些情况下可以直接用 requests 来模拟 Ajax 请求来直接得到数据。但有些情况下 Ajax 的一些请求接口可能带有一些加密参数，如 token、sign 等等，如果不分析清楚这些参数是怎么生成的话，就难以模拟和构造这些参数。</p><p>此时可以直接选择使用 Selenium 驱动浏览器渲染的方式来解决，实现所见即所爬，则无需关心在该网页背后发生了什么请求、得到什么数据以及怎么渲染页面，我们看到的页面就是最终浏览器帮我们模拟了 Ajax 请求和 JavaScript 渲染得到的最终结果，而 Selenium 正好也能拿到这个最终结果，相当于绕过了 Ajax 请求分析和模拟的阶段，直达目标。</p><p>然而 Selenium 也有其局限性，其爬取效率较低，有些爬取需要模拟浏览器的操作，实现相对烦琐。但在某些场景下也是一种有效的爬取手段。</p><hr><h3 id="使用-Selenium-爬取美团网大学城美食"><a href="#使用-Selenium-爬取美团网大学城美食" class="headerlink" title="使用 Selenium 爬取美团网大学城美食"></a>使用 Selenium 爬取美团网大学城美食</h3><h5 id="1-首先分析目标网站"><a href="#1-首先分析目标网站" class="headerlink" title="1. 首先分析目标网站"></a>1. 首先分析目标网站</h5><img src="https://img-blog.csdnimg.cn/20200823130510381.png" width="60%" loading="lazy"><img src="https://img-blog.csdnimg.cn/20200823130603348.png" width="60%" loading="lazy"><p>可以发现 URL 随着页数变化的规律，于是构造一个页面爬取的框架：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> time<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> TimeoutException<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptions<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverlogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s - %(levelname)s: %(message)s'</span><span class="token punctuation">)</span>INDEX_URL <span class="token operator">=</span> <span class="token string">'https://gz.meituan.com/meishi/b1184/pn&#123;page&#125;/'</span>TIME_OUT <span class="token operator">=</span> <span class="token number">30</span>TOTAL_PAGE <span class="token operator">=</span> <span class="token number">12</span>option <span class="token operator">=</span> ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'useAutomationExtension'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span>wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> TIME_OUT<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scrape_page</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> condition<span class="token punctuation">,</span> locator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Page scraping framework    Args:        url: pages to be scraped        condition: judgement conditions for page loading        locator: locator    Returns:        None    """</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'scraping %s'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        browser<span class="token punctuation">.</span>execute_cdp_cmd<span class="token punctuation">(</span><span class="token string">'Page.addScriptToEvaluateOnNewDocument'</span><span class="token punctuation">,</span>                                <span class="token punctuation">&#123;</span><span class="token string">'source'</span><span class="token punctuation">:</span> <span class="token string">'Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>condition<span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> TimeoutException<span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'error occurred while scraping %s'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> exc_info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scrape_index</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Scrape every page    Args:        page:    Returns:        None    """</span>    url <span class="token operator">=</span> INDEX_URL<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>page<span class="token operator">=</span>page<span class="token punctuation">)</span>    scrape_page<span class="token punctuation">(</span>url<span class="token punctuation">,</span> condition<span class="token operator">=</span>EC<span class="token punctuation">.</span>visibility_of_all_elements_located<span class="token punctuation">,</span>                locator<span class="token operator">=</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div/section/div/div[2]/div[2]/div[1]/ul/li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="2-接着分析每个页面中每个商家的-URL-链接"><a href="#2-接着分析每个页面中每个商家的-URL-链接" class="headerlink" title="2. 接着分析每个页面中每个商家的 URL 链接"></a>2. 接着分析每个页面中每个商家的 URL 链接</h5><img src="https://img-blog.csdnimg.cn/20200823142056540.png" width="60%" loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Get the url of each business    Args:        None    Returns:        generator    """</span>    elements <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div/section/div/div[2]/div[2]/div[1]/ul/li/div[1]/a'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> element <span class="token keyword">in</span> elements<span class="token punctuation">:</span>        url <span class="token operator">=</span> element<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> url</code></pre><h5 id="3-然后爬取每个商家的页面"><a href="#3-然后爬取每个商家的页面" class="headerlink" title="3. 然后爬取每个商家的页面"></a>3. 然后爬取每个商家的页面</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scrape_detail</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Scrape the page of each business    Args:        url    Returns:        None    """</span>    scrape_page<span class="token punctuation">(</span>url<span class="token punctuation">,</span> condition<span class="token operator">=</span>EC<span class="token punctuation">.</span>visibility_of_element_located<span class="token punctuation">,</span>                locator<span class="token operator">=</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div/section/div/div[2]/div[1]/div[@class="name"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="4-然后使用开发者工具解析商家页面信息"><a href="#4-然后使用开发者工具解析商家页面信息" class="headerlink" title="4. 然后使用开发者工具解析商家页面信息"></a>4. 然后使用开发者工具解析商家页面信息</h5><img src="https://img-blog.csdnimg.cn/20200823143148265.png" width="60%" loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Parse the information of each business    Args:        None    Returns:        data    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>            <span class="token string">"/html/body/div[1]/section/div/div[2]/div[1]/div[1]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'食品安全档案'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">'无'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        star <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div/section/div/div[2]/div[1]/div[2]/p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        star <span class="token operator">=</span> <span class="token string">'无'</span>    <span class="token keyword">if</span> star <span class="token operator">==</span> <span class="token string">'暂'</span><span class="token punctuation">:</span>        star <span class="token operator">=</span> <span class="token string">'无'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        per_capita_consumption <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>            <span class="token string">"/html/body/div/section/div/div[2]/div[1]/div[2]/p/span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'人均'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        per_capita_consumption <span class="token operator">=</span> <span class="token string">'无'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        address <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div/section/div/div[2]/div[1]/div[3]/p[1]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span>            <span class="token string">'地址：'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        address <span class="token operator">=</span> <span class="token string">'无'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        telephone <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div/section/div/div[2]/div[1]/div[3]/p[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span>            <span class="token string">'电话：'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        telephone <span class="token operator">=</span> <span class="token string">'无'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        business_hours <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>            <span class="token string">"/html/body/div/section/div/div[2]/div[1]/div[3]/p[3]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'营业时间：'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        business_hours <span class="token operator">=</span> <span class="token string">'无'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        raw_recommended_dishes <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>            <span class="token string">"/html/body/div/section/div/div[3]/div[1]/div[2]/div/ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        recommended_dishes <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">u"[\u4e00-\u9fa5]+"</span><span class="token punctuation">,</span> raw_recommended_dishes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        recommended_dishes <span class="token operator">=</span> <span class="token string">'无'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        review_people <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>            <span class="token string">"/html/body/div/section/div/div[3]/div[1]/div[3]/div[1]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span>            <span class="token string">'条网友点评'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'质量排序时间排序'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        review_people <span class="token operator">=</span> <span class="token string">'无'</span>    url <span class="token operator">=</span> browser<span class="token punctuation">.</span>current_url    <span class="token keyword">try</span><span class="token punctuation">:</span>        cover <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>            <span class="token string">"/html/body/div/section/div/div[2]/div[2]/div/div/img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        cover <span class="token operator">=</span> <span class="token string">'无'</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"NAME"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">"STAR"</span><span class="token punctuation">:</span> star<span class="token punctuation">,</span> <span class="token string">"PER_CAPITA_CONSUMPTION"</span><span class="token punctuation">:</span> per_capita_consumption<span class="token punctuation">,</span> <span class="token string">"ADDRESS"</span><span class="token punctuation">:</span> address<span class="token punctuation">,</span>            <span class="token string">"TELEPHONE"</span><span class="token punctuation">:</span> telephone<span class="token punctuation">,</span> <span class="token string">"BUSINESS_HOURS"</span><span class="token punctuation">:</span> business_hours<span class="token punctuation">,</span> <span class="token string">"RECOMMENDED_DISHES"</span><span class="token punctuation">:</span> recommended_dishes<span class="token punctuation">,</span>            <span class="token string">"REVIEW_PEOPLE"</span><span class="token punctuation">:</span> review_people<span class="token punctuation">,</span> <span class="token string">"URL"</span><span class="token punctuation">:</span> url<span class="token punctuation">,</span> <span class="token string">"COVER"</span><span class="token punctuation">:</span> cover<span class="token punctuation">&#125;</span></code></pre><h5 id="5-最后将爬取的数据存入-MongoDB-数据库"><a href="#5-最后将爬取的数据存入-MongoDB-数据库" class="headerlink" title="5. 最后将爬取的数据存入 MongoDB 数据库"></a>5. 最后将爬取的数据存入 MongoDB 数据库</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_to_MongoDB</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Store data in MongoDB database    Args:        data    Returns:        None    """</span>    collection<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'NAME'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token string">'$set'</span><span class="token punctuation">:</span> data    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> upsert<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h5 id="6-主函数"><a href="#6-主函数" class="headerlink" title="6. 主函数"></a>6. 主函数</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> each_page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TOTAL_PAGE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        scrape_index<span class="token punctuation">(</span>each_page<span class="token punctuation">)</span>        detail_urls <span class="token operator">=</span> parse_index<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> detail_url <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>detail_urls<span class="token punctuation">)</span><span class="token punctuation">:</span>            scrape_detail<span class="token punctuation">(</span>detail_url<span class="token punctuation">)</span>            detail_data <span class="token operator">=</span> parse_detail<span class="token punctuation">(</span><span class="token punctuation">)</span>            save_to_MongoDB<span class="token punctuation">(</span>detail_data<span class="token punctuation">)</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'save data %s'</span><span class="token punctuation">,</span> detail_data<span class="token punctuation">)</span></code></pre><h5 id="7-爬取结果"><a href="#7-爬取结果" class="headerlink" title="7. 爬取结果"></a>7. 爬取结果</h5><p><img src="https://img-blog.csdnimg.cn/20200823143715566.png?1x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><hr><h5 id="完整源代码："><a href="#完整源代码：" class="headerlink" title="完整源代码："></a>完整源代码：</h5><p><a href="https://github.com/Giyn/PythonSpider/blob/master/MeiTuan/CollegeTownFood/college_town_food.py">https://github.com/Giyn/PythonSpider/blob/master/MeiTuan/CollegeTownFood/college_town_food.py</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Selenium是什么？&quot;&gt;&lt;a href=&quot;#Selenium是什么？&quot; class=&quot;headerlink&quot; title=&quot;Selenium是什么？&quot;&gt;&lt;/a&gt;Selenium是什么？&lt;/h3&gt;&lt;p&gt;Selenium 是一个自动化测试工具，利用它可以驱动浏览器</summary>
      
    
    
    
    <category term="WebScraper" scheme="http://giyn.work/categories/WebScraper/"/>
    
    
    <category term="WebScraper" scheme="http://giyn.work/tags/WebScraper/"/>
    
    <category term="Selenium" scheme="http://giyn.work/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>多进程爬取豆瓣电影 Top250 并存入 MongoDB 数据库</title>
    <link href="http://giyn.work/posts/9b785215/"/>
    <id>http://giyn.work/posts/9b785215/</id>
    <published>2020-09-26T03:07:09.000Z</published>
    <updated>2021-01-29T03:33:13.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="该爬虫大致分为以下步骤："><a href="#该爬虫大致分为以下步骤：" class="headerlink" title="该爬虫大致分为以下步骤："></a>该爬虫大致分为以下步骤：</h2><h5 id="1-获取豆瓣电影-Top250-页面的-10-个分页的-URL。"><a href="#1-获取豆瓣电影-Top250-页面的-10-个分页的-URL。" class="headerlink" title="1. 获取豆瓣电影 Top250 页面的 10 个分页的 URL。"></a>1. <strong>获取豆瓣电影 Top250 页面的 10 个分页的 URL</strong>。</h5><h5 id="2-通过解析-10-个分页的-HTML-获取每个分页-25-部电影的-URL。"><a href="#2-通过解析-10-个分页的-HTML-获取每个分页-25-部电影的-URL。" class="headerlink" title="2. 通过解析 10 个分页的 HTML 获取每个分页 25 部电影的 URL。"></a>2. <strong>通过解析 10 个分页的 HTML 获取每个分页 25 部电影的 URL。</strong></h5><h5 id="3-获取每部电影的-HTML-代码并解析提取电影信息。"><a href="#3-获取每部电影的-HTML-代码并解析提取电影信息。" class="headerlink" title="3. 获取每部电影的 HTML 代码并解析提取电影信息。"></a>3. <strong>获取每部电影的 HTML 代码并解析提取电影信息</strong>。</h5><h5 id="4-将提取的信息保存为-dict-形式并存入-MongoDB-数据库。"><a href="#4-将提取的信息保存为-dict-形式并存入-MongoDB-数据库。" class="headerlink" title="4. 将提取的信息保存为 dict 形式并存入 MongoDB 数据库。"></a>4. <strong>将提取的信息保存为 dict 形式并存入 MongoDB 数据库。</strong></h5><blockquote><p>MySQL 对于一些结构化或嵌套类型的数据存储起来不太方便，且需要额外维护字段信息，相对麻烦。而 MongoDB 相对更方便，性能也很强，适合存储该类数据。</p></blockquote><h5 id="5-设计多进程爬虫以提高效率。"><a href="#5-设计多进程爬虫以提高效率。" class="headerlink" title="5. 设计多进程爬虫以提高效率。"></a>5. <strong>设计多进程爬虫以提高效率</strong>。</h5><hr><h3 id="一、首先分析-10-个分页的-URL-规律"><a href="#一、首先分析-10-个分页的-URL-规律" class="headerlink" title="一、首先分析 10 个分页的 URL 规律"></a>一、首先分析 10 个分页的 URL 规律</h3><img src="https://img-blog.csdnimg.cn/20200609214652613.png" width="50%" loading="lazy"><p>进入第二页之后，查看此时的 URL 为 <code>https://movie.douban.com/top250?start=25&amp;filter=</code></p><img src="https://img-blog.csdnimg.cn/20200609214842677.png" width="50%" loading="lazy"><p>进入第二页之后，查看此时的 URL 为 <code>https://movie.douban.com/top250?start=50&amp;filter=</code></p><p>……</p><p><strong>显然此处通过 start 参数来控制分页，因此我们通过如下代码来获取 10 个分页：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @功能: 爬取网页并获取其HTML代码    @参数: 网页URL    @返回: 网页的HTML代码    """</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'scraping %s...'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>text        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'get invalid status code %s while scraping %s'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">except</span> requests<span class="token punctuation">.</span>RequestException<span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'error occurred while scraping %s'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> exc_info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_page_html</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @功能: 获取外部页面的HTML代码    @参数: 页面索引    @返回: 外部页面的HTML代码    """</span>    page_url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"https://movie.douban.com/top250?start=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">&amp;filter="</span></span>    <span class="token keyword">return</span> get_html<span class="token punctuation">(</span>page_url<span class="token punctuation">)</span></code></pre><hr><h3 id="二、解析分页的-HTML-并获取每个分页-25-部电影的-URL"><a href="#二、解析分页的-HTML-并获取每个分页-25-部电影的-URL" class="headerlink" title="二、解析分页的 HTML 并获取每个分页 25 部电影的 URL"></a>二、解析分页的 HTML 并获取每个分页 25 部电影的 URL</h3><p>分析 HTML 代码并提取出每部电影的 URL：<br><img src="https://img-blog.csdnimg.cn/20200609215654112.png" width="100%" loading="lazy"></p><p>使用 XPath Helper 检验一下：<br><img src="https://img-blog.csdnimg.cn/20200609215932690.png" alt="在这里插入图片描述" loading="lazy"></p><p><strong>代码如下：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_movies_url</span><span class="token punctuation">(</span>page_html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @功能: 从外部页面获取每部电影的URL    @参数: 每个外部页面的HTML代码    @返回: 每个外部页面的URL    """</span>    doc <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_html<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        movie_url <span class="token operator">=</span> doc<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ol/li[&#123;&#125;]/div/div[2]/div[1]/a/@href'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 提取每部电影的URL</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'get movie url %s'</span><span class="token punctuation">,</span> movie_url<span class="token punctuation">)</span>        <span class="token keyword">yield</span> movie_url</code></pre><hr><h3 id="三、解析每部电影并提取信息，然后将提取的信息保存为-dict-形式"><a href="#三、解析每部电影并提取信息，然后将提取的信息保存为-dict-形式" class="headerlink" title="三、解析每部电影并提取信息，然后将提取的信息保存为 dict 形式"></a>三、解析每部电影并提取信息，然后将提取的信息保存为 dict 形式</h3><p><strong>代码如下：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_movie</span><span class="token punctuation">(</span>movie_html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @功能: 解析每部电影的信息并提取    @参数: 对应电影的HTML代码    @返回: dict形式的电影信息    """</span>    doc <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>movie_html<span class="token punctuation">)</span>  <span class="token comment"># 解析电影HTML代码</span>    cover <span class="token operator">=</span> doc<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[3]/div[1]/div[3]/div[1]/div[1]/div[1]/div[1]/div[1]/a/img/@src"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    name <span class="token operator">=</span> doc<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[3]/div[1]/h1/span[1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    rating_num <span class="token operator">=</span> doc<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[3]/div[1]/div[3]/div[1]/div[1]/div[1]/div[2]/div[1]/div[2]/div/div[2]/a/span/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    date <span class="token operator">=</span> doc<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[3]/div[1]/h1/span[2]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    info <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>doc<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class='related-info']/div[@id='link-report']/span/text()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\xa0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">u'\u3000'</span><span class="token punctuation">,</span> <span class="token string">u' '</span><span class="token punctuation">)</span>    score <span class="token operator">=</span> doc<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[3]/div[1]/div[3]/div[1]/div[1]/div[1]/div[2]/div[1]/div[2]/strong/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    score <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">if</span> score <span class="token keyword">else</span> <span class="token boolean">None</span>       <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token string">'cover'</span><span class="token punctuation">:</span> cover<span class="token punctuation">,</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>        <span class="token string">'rating_num'</span><span class="token punctuation">:</span> rating_num<span class="token punctuation">,</span>        <span class="token string">'date'</span><span class="token punctuation">:</span> date<span class="token punctuation">,</span>        <span class="token string">'info'</span><span class="token punctuation">:</span> info<span class="token punctuation">,</span>        <span class="token string">'score'</span><span class="token punctuation">:</span> score    <span class="token punctuation">&#125;</span></code></pre><h3 id="四、将提取到的电影信息存入-MongoDB-数据库"><a href="#四、将提取到的电影信息存入-MongoDB-数据库" class="headerlink" title="四、将提取到的电影信息存入 MongoDB 数据库"></a>四、将提取到的电影信息存入 MongoDB 数据库</h3><pre class="language-python" data-language="python"><code class="language-python">MONGO_CONNECTION_STRING <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span>  <span class="token comment"># MongoDB的连接字符串</span>MONGO_DB_NAME <span class="token operator">=</span> <span class="token string">'movies'</span>  <span class="token comment"># 数据库名称</span>MONGO_COLLECTION_NAME <span class="token operator">=</span> <span class="token string">'movies1'</span>  <span class="token comment"># 集合名称</span>client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>MONGO_CONNECTION_STRING<span class="token punctuation">)</span>  <span class="token comment"># 创建MongoDB的连接对象</span>db <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">'movies'</span><span class="token punctuation">]</span>  <span class="token comment"># 指定数据库</span>collection <span class="token operator">=</span> db<span class="token punctuation">[</span><span class="token string">'douban_movies'</span><span class="token punctuation">]</span>  <span class="token comment"># 指定集合</span><span class="token keyword">def</span> <span class="token function">save_to_MongoDB</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @功能: 把电影数据存入MongoDB数据库    @参数: dict形式的电影信息    @返回: 无    """</span>    collection<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token string">'$set'</span><span class="token punctuation">:</span> data    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> upsert<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><hr><h3 id="五、设计多进程爬虫以提高效率"><a href="#五、设计多进程爬虫以提高效率" class="headerlink" title="五、设计多进程爬虫以提高效率"></a>五、设计多进程爬虫以提高效率</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scrape_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @功能: 爬取网页并获取其HTML代码    @参数: 网页URL    @返回: 网页的HTML代码    """</span>    <span class="token keyword">return</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 代码复用,降低耦合度</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>page_index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @功能: 每个线程    @参数: 电影页面索引    @返回: 无    """</span>    page_html <span class="token operator">=</span> get_page_html<span class="token punctuation">(</span>page_index<span class="token punctuation">)</span>    movies_url <span class="token operator">=</span> get_movies_url<span class="token punctuation">(</span>page_html<span class="token punctuation">)</span>    <span class="token keyword">for</span> movie_url <span class="token keyword">in</span> movies_url<span class="token punctuation">:</span>        movie_html <span class="token operator">=</span> scrape_html<span class="token punctuation">(</span>movie_url<span class="token punctuation">)</span>        data <span class="token operator">=</span> parse_movie<span class="token punctuation">(</span>movie_html<span class="token punctuation">)</span>                logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'get data %s'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'saving data to mongodb'</span><span class="token punctuation">)</span>        save_to_MongoDB<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'data saved successfully'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    page_indexs <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>main<span class="token punctuation">,</span> page_indexs<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><p><strong>运行代码，结果如下：</strong></p><img src="https://img-blog.csdnimg.cn/20200609220745209.png" width="100%" loading="lazy"><p>可以看到电影数据已经成功存入 MongoDB 数据库，此处使用 Robo 3T 进行可视化。</p><hr><h4 id="完整源代码"><a href="#完整源代码" class="headerlink" title="完整源代码"></a><a href="https://github.com/Giyn/PythonSpider/blob/master/DouBanMoviesSpiders/crawl%20douban_movies%20%26%20store%20to%20MongoDB.py">完整源代码</a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;该爬虫大致分为以下步骤：&quot;&gt;&lt;a href=&quot;#该爬虫大致分为以下步骤：&quot; class=&quot;headerlink&quot; title=&quot;该爬虫大致分为以下步骤：&quot;&gt;&lt;/a&gt;该爬虫大致分为以下步骤：&lt;/h2&gt;&lt;h5 id=&quot;1-获取豆瓣电影-Top250-页面的-10-个分</summary>
      
    
    
    
    <category term="WebScraper" scheme="http://giyn.work/categories/WebScraper/"/>
    
    
    <category term="requests" scheme="http://giyn.work/tags/requests/"/>
    
    <category term="WebScraper" scheme="http://giyn.work/tags/WebScraper/"/>
    
    <category term="MultiProcessing" scheme="http://giyn.work/tags/MultiProcessing/"/>
    
  </entry>
  
  <entry>
    <title>Selenium 的基本使用</title>
    <link href="http://giyn.work/posts/9c128aa7/"/>
    <id>http://giyn.work/posts/9c128aa7/</id>
    <published>2020-09-25T14:56:06.000Z</published>
    <updated>2020-09-26T03:28:31.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为何使用-Selenium"><a href="#为何使用-Selenium" class="headerlink" title="为何使用 Selenium"></a>为何使用 Selenium</h2><p>在很多情况下，Ajax 请求的接口通常会包含加密的参数。由于接口的请求加上了参数，如果不深入分析并找到构造逻辑，是难以直接模拟这些 Ajax 请求的。</p><p>此时解决方法通常有两种，一种是深挖其中的逻辑，把其中的构造逻辑完全找出来，再用 Python 复现，构造 Ajax 请求；另外一种方法就是直接通过模拟浏览器的方式，绕过这个过程。</p><p>此处可以使用 Selenium 工具模拟浏览器爬取。</p><blockquote><p>Selenium 是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面源代码，做到可见即可爬。对于一些使用 JavaScript 动态渲染的页面来说，此种抓取方式非常有效。</p></blockquote><hr><h2 id="Selenium的用法"><a href="#Selenium的用法" class="headerlink" title="Selenium的用法"></a>Selenium的用法</h2><h5 id="声明浏览器对象："><a href="#声明浏览器对象：" class="headerlink" title="声明浏览器对象："></a>声明浏览器对象：</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span> browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span> browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span><span class="token punctuation">)</span> browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Safari<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这样就完成了浏览器对象的初始化并将其赋值为 browser 对象。接下来要做的就是调用 browser 对象，让其执行各个动作以模拟浏览器操作。</p><hr><h5 id="访问页面："><a href="#访问页面：" class="headerlink" title="访问页面："></a>访问页面：</h5><p>可以用 get 方法来请求网页，只需要把参数传入链接 URL 即可。比如，这里用 get 方法访问百度，然后打印出源代码，代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行代码后会弹出 Chrome 浏览器并且自动访问百度，然后控制台会输出百度页面的源代码，10 秒后浏览器关闭。</p><img src="https://img-blog.csdnimg.cn/20200712223004852.png" width="80%" loading="lazy"><img src="https://img-blog.csdnimg.cn/20200712223506994.png" width="80%" loading="lazy"><hr><h5 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h5><p>Selenium 可以驱动浏览器完成各种操作，比如填充表单、模拟点击等。当我们想要完成向某个输入框输入文字的操作时，首先需要知道这个输入框在哪，而 Selenium 提供了一系列查找节点的方法，可以用这些方法来获取想要的节点，以便执行下一步动作或者提取信息。</p><h6 id="单个节点"><a href="#单个节点" class="headerlink" title="单个节点"></a>单个节点</h6><p>当我们想要从百度页面中提取搜索框节点，首先要观察它的源代码：<br><img src="https://img-blog.csdnimg.cn/20200712223843444.png?0x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>可以发现，它的 id 是 kw，name 是 wd，此外还有许多其他属性。此时我们就可以用多种方式获取它了。比如，find_element_by_name 代表根据 name 值获取，find_element_by_id 则是根据 id 获取，另外，还有根据 XPath、CSS 选择器等获取的方式：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>input_first <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>input_second <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="kw"]'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_first<span class="token punctuation">,</span> input_second<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">&lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;d2f6a6403d125ae6df4055652621ac0e&quot;, element&#x3D;&quot;27afc75f-3751-482e-b62b-2721b02c9e98&quot;)&gt;&lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;d2f6a6403d125ae6df4055652621ac0e&quot;, element&#x3D;&quot;27afc75f-3751-482e-b62b-2721b02c9e98&quot;)&gt;</code></pre><pre class="language-none"><code class="language-none">这里列出所有获取单个节点的方法：find_element_by_id find_element_by_name find_element_by_xpath find_element_by_link_text find_element_by_partial_link_text find_element_by_tag_name find_element_by_class_name find_element_by_css_selector</code></pre><p>另外，Selenium 还提供了 find_element 这个通用方法，它需要传入两个参数：查找方式 By 和值：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> Bybrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>input_ <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这种查找方式的功能和上面列举的查找函数完全一致，不过参数更加灵活。</p><h6 id="多个节点"><a href="#多个节点" class="headerlink" title="多个节点"></a>多个节点</h6><p>如果在网页中有多个节点需要查找，要用 find_elements 这样的方法，例如要获取百度热榜的内容：</p><img src="https://img-blog.csdnimg.cn/20200712231820492.png" width="40%" loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>lis<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">"//div[1]/div[1]/div[5]/div/div/div[3]/ul/li"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">[&lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;e72283ba0c520929c93f1a9075ebdd8f&quot;, element&#x3D;&quot;d48cc9a8-c10b-4762-a8c3-b333d16c0050&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;e72283ba0c520929c93f1a9075ebdd8f&quot;, element&#x3D;&quot;b130131c-fdd7-4e3f-af04-20a4b9007d5d&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;e72283ba0c520929c93f1a9075ebdd8f&quot;, element&#x3D;&quot;b2251221-348d-4f28-ba07-46f22e14de1f&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;e72283ba0c520929c93f1a9075ebdd8f&quot;, element&#x3D;&quot;98b63893-bdc6-473a-bcad-68301ad5e5de&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;e72283ba0c520929c93f1a9075ebdd8f&quot;, element&#x3D;&quot;aa0d225e-fd9a-4b94-8900-7cad59849755&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;e72283ba0c520929c93f1a9075ebdd8f&quot;, element&#x3D;&quot;667d8cb3-8500-4d7f-868b-38c0d90af961&quot;)&gt;]</code></pre><p>可以看到，得到的内容变成了列表类型，列表中的每个节点都是 WebElement 类型。</p><blockquote><p>如果用 find_element 方法，只能获取匹配的第一个节点，结果是 WebElement 类型。<br>如果用 find_elements 方法，则结果是列表类型，列表中的每个节点是 WebElement 类型。</p></blockquote><pre class="language-none"><code class="language-none">这里列出所有获取多个节点的方法：find_elements_by_id find_elements_by_name find_elements_by_xpath find_elements_by_link_text find_elements_by_partial_link_text find_elements_by_tag_name find_elements_by_class_name find_elements_by_css_selector</code></pre><hr><h5 id="节点交互"><a href="#节点交互" class="headerlink" title="节点交互"></a>节点交互</h5><p>Selenium 可以驱动浏览器来执行一些操作，或者说可以让浏览器模拟执行一些动作。比较常见的用法有：输入文字时用 send_keys 方法，清空文字时用 clear 方法，点击按钮时用 click 方法，举个例子：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> timebrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>input_ <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//div[1]/div[1]/div[5]/div/div/form/span[1]/input'</span><span class="token punctuation">)</span>input_<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>input_<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>input_<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'许继元'</span><span class="token punctuation">)</span>button <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//div[1]/div[1]/div[5]/div/div/form/span[2]/input'</span><span class="token punctuation">)</span>button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h5 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h5><p>除了针对某个节点执行的一些交互动作，还有另外一些操作，它们没有特定的执行对象，比如鼠标拖拽、键盘按键等，这些动作用另一种方式来执行，那就是动作链。举个例子，现在要实现将某个节点从一处拖拽到另外一处：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframeResult'</span><span class="token punctuation">)</span>source <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="draggable"]'</span><span class="token punctuation">)</span>target <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="droppable"]'</span><span class="token punctuation">)</span>actions <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>browser<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>drag_and_drop<span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h5 id="执行-JavaScript"><a href="#执行-JavaScript" class="headerlink" title="执行 JavaScript"></a>执行 JavaScript</h5><p>Selenium API 并没有提供实现某些操作的方法，比如下拉进度条。但它可以直接模拟运行 JavaScript，此时使用 execute_script 方法即可实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com/explore'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0, document.body.scrollHeight)'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'alert("To Bottom")'</span><span class="token punctuation">)</span></code></pre><p>这里利用 execute_script 方法将进度条下拉到最底部，然后弹出 alert 提示框。</p><p>有了这个方法，基本上 API 没有提供的所有功能都可以用执行 JavaScript 的方式来实现了。</p><hr><h5 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h5><p>通过 page_source 属性可以获取网页的源代码，接着使用解析库提取信息。但 Selenium 提供了选择节点的方法，并且返回的是 WebElement 类型，则它也有相关的方法和属性来直接提取节点信息，如属性、文本等。这样就可以不用通过解析源代码来提取信息了。</p><h6 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h6><p>先选中节点，再使用 get_attribute 方法来获取节点的属性：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com/'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>logo <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'s-hotsearch-content'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">&lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;93869ad40b93b047111cb97606815423&quot;, element&#x3D;&quot;8b32fd1f-b592-4c4f-a651-63f19caaa524&quot;)&gt;hotsearch-content-wrapper</code></pre><h6 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h6><p>每个 WebElement 节点都有 text 属性，直接调用这个属性就可以得到节点内部的文本信息：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com/'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>input_ <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'hot-title'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">百度热榜</code></pre><hr><h5 id="获取-ID、位置、标签名、大小"><a href="#获取-ID、位置、标签名、大小" class="headerlink" title="获取 ID、位置、标签名、大小"></a>获取 ID、位置、标签名、大小</h5><p>WebElement 节点还有其他属性，比如 id 属性可以获取节点 id，location 属性可以获取该节点在页面中的相对位置，tag_name 属性可以获取标签名称，size 属性可以获取节点的大小，也就是宽高，例如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.bilibili.com/'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>input_ <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'primary-menu-itnl'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_<span class="token punctuation">.</span>tag_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_<span class="token punctuation">.</span>size<span class="token punctuation">)</span></code></pre><p>Output：</p><pre class="language-none"><code class="language-none">7ad2640f-b1cf-4635-8178-eddce14e73b4&#123;&#39;x&#39;: 10, &#39;y&#39;: 155&#125;div&#123;&#39;height&#39;: 108, &#39;width&#39;: 999&#125;</code></pre><hr><h5 id="切换-Frame"><a href="#切换-Frame" class="headerlink" title="切换 Frame"></a>切换 Frame</h5><p>网页中有一种节点叫作 iframe，也就是子 Frame，相当于页面的子页面，它的结构和外部网页的结构完全一致。Selenium 打开页面后，默认是在父级 Frame 里面操作，而此时如果页面中还有子 Frame，Selenium 是不能获取到子 Frame 里面的节点的。这时就需要使用 switch_to.frame 方法来切换 Frame：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> NoSuchElementExceptionbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframeResult'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    logo <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'logo'</span><span class="token punctuation">)</span><span class="token keyword">except</span> NoSuchElementException<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'NO LOGO'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>parent_frame<span class="token punctuation">(</span><span class="token punctuation">)</span>logo <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'logo'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>首先通过 switch_to.frame 方法切换到子 Frame 里面，然后尝试获取子 Frame 里的 logo 节点（实际上是不能找到的），若找不到，就会抛出 NoSuchElementException 异常。接下来切换回父级 Frame，然后重新获取节点，则可以成功获取。</p><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">NO LOGO&lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;70eb5ef47851fceefb1b7cd9a0c5026e&quot;, element&#x3D;&quot;a4000bc2-1bb7-4e88-960d-a61a7b69eb7c&quot;)&gt;RUNOOB.COM</code></pre><p>当页面中包含子 Frame 时，如果想获取子 Frame 中的节点，需要先调用 switch_to.frame 方法切换到对应的 Frame，然后再进行操作。</p><hr><h5 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h5><p>在 Selenium 中，get 方法会在网页框架加载结束后结束执行，此时如果获取 page_source，可能并不是浏览器完全加载完成的页面，如果某些页面有额外的 Ajax 请求，我们在网页源代码中不一定能成功获取到。所以，这里需要延时等待一定时间，确保节点已经加载出来。</p><p>这里等待的方式有两种：一种是隐式等待，一种是显式等待。</p><h6 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h6><p>当使用隐式等待执行测试的时候，如果 Selenium 没有在 DOM 中找到节点，将继续等待，超出设定时间后，则抛出找不到节点的异常。换句话说，隐式等待可以在我们查找节点而节点并没有立即出现的时候，等待一段时间再查找 DOM，默认的时间是 0。例如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">)</span>input_ <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'logo-img'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_<span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">&lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;f8a1bdd5fca3e2e3f1d1081bdf8dd94a&quot;, element&#x3D;&quot;dd78cc2c-bab0-4a8e-8215-d9d0dcdab8eb&quot;)&gt;</code></pre><h6 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h6><p>隐式等待的效果并没有那么好，因为只规定了一个固定时间，而页面的加载时间会受到网络条件的影响。</p><p>有一种更合适的显式等待方法，它指定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出来了这个节点，就返回查找的节点；如果到了规定时间依然没有加载出该节点，则抛出超时异常。例如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> ECbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com/'</span><span class="token punctuation">)</span>wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>input_ <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>button <span class="token operator">=</span>  wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[2]/div/div/div[2]/div/div[1]/div[2]/form/div[1]/button'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span></code></pre><p>首先引入 WebDriverWait 对象，指定最长等待时间，然后调用它的 until() 方法，传入要等待条件 expected_conditions。此处传入了 presence_of_element_located 条件，代表节点出现，其参数是节点的定位元组，也就是 ID 为 q 的节点搜索框。</p><p>因此，在 10 秒内如果 ID 为 q 的节点（即搜索框）成功加载出来，就返回该节点；如果超过 10 秒还没有加载出来，就抛出异常。</p><p>对于按钮，可以更改等待条件为 element_to_be_clickable（可点击），所以查找按钮时先查找 Xpath 为 <code>/html/body/div[2]/div/div/div[2]/div/div[1]/div[2]/form/div[1]/button</code> 的按钮，如果 10 秒内它是可点击的，就代表它成功加载出来了，则返回这个按钮节点；如果超过 10 秒还不可点击，也就是没有加载出来，就抛出异常。</p><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">&lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;1dd8bab4f5f4e1d26dc29e6fd9e33275&quot;, element&#x3D;&quot;305397ec-fc99-4c4b-9762-cd1d4c94090c&quot;)&gt; &lt;selenium.webdriver.remote.webelement.WebElement (session&#x3D;&quot;1dd8bab4f5f4e1d26dc29e6fd9e33275&quot;, element&#x3D;&quot;d4118061-c3b4-44b0-8fea-0745d73c58fc&quot;)&gt;</code></pre><p>如果 10 秒内没有成功加载，则抛出 TimeoutException 异常。</p><h6 id="等待条件："><a href="#等待条件：" class="headerlink" title="等待条件："></a>等待条件：</h6><table><thead><tr><th>等待条件</th><th>含义</th></tr></thead><tbody><tr><td>title_is</td><td>标题是某内容</td></tr><tr><td>title_contains</td><td>标题包含某内容</td></tr><tr><td>presence_of_element_located</td><td>节点加载出，传入定位元组，如 (By.ID, ‘p’)</td></tr><tr><td>visibility_of_element_located</td><td>节点可见，传入定位元组</td></tr><tr><td>visibility_of</td><td>可见，传入节点对象</td></tr><tr><td>presence_of_all_elements_located</td><td>所有节点加载出</td></tr><tr><td>text_to_be_present_in_element</td><td>某个节点文本包含某文字</td></tr><tr><td>text_to_be_present_in_element_value</td><td>某个节点值包含某文字</td></tr><tr><td>frame_to_be_available_and_switch_to_it frame</td><td>加载并切换</td></tr><tr><td>invisibility_of_element_located</td><td>节点不可见</td></tr><tr><td>element_to_be_clickable</td><td>节点可点击</td></tr><tr><td>staleness_of</td><td>判断一个节点是否仍在 DOM，可判断页面是否已经刷新</td></tr><tr><td>element_to_be_selected</td><td>节点可选择，传节点对象</td></tr><tr><td>element_located_to_be_selected</td><td>节点可选择，传入定位元组</td></tr><tr><td>element_selection_state_to_be</td><td>传入节点对象以及状态，相等返回 True，否则返回 False</td></tr><tr><td>element_located_selection_state_to_be</td><td>传入定位元组以及状态，相等返回 True，否则返回 False</td></tr><tr><td>alert_is_present</td><td>是否出现 Alert</td></tr><tr><td>invisibility_of_element_located</td><td>节点不可见</td></tr></tbody></table><hr><h5 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h5><p>Selenium 使用 back 方法后退，使用 forward 方法前进：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com/'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.python.org/'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h5 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h5><p>Selenium 可以方便地对 Cookies 进行操作，例如获取、添加、删除 Cookies 等：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com/explore'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>add_cookie<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'www.zhihu.com'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'germey'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>delete_all_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">[&#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1594790583, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_gid&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;GA1.2.1462052348.1594704184&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1657776183, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_ga&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;GA1.2.1542833660.1594704184&#39;&#125;, &#123;&#39;domain&#39;: &#39;www.zhihu.com&#39;, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;KLBRSID&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;031b5396d5ab406499e2ac6fe1bb1a43|1594704183|1594704182&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1626240183, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;1594704184&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;1594704184&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1594704243, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_gat_gtag_UA_149949619_1&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;1&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1689312182, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;d_c0&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;&quot;ABBSJ1oFkxGPTirgBoF55isXJsyZ7AHpPfI&#x3D;|1594704182&quot;&#39;&#125;, &#123;&#39;domain&#39;: &#39;www.zhihu.com&#39;, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;SESSIONID&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;9dviPRsE7McwBJnMo9mpFtJwci26vXThpMAk4aguPv2&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_xsrf&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;99a2430a-941e-49f1-bc70-132ac12adda6&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1657776182, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_zap&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;44078cd7-5d9b-4f68-a673-6dd9532aad61&#39;&#125;][&#123;&#39;domain&#39;: &#39;.www.zhihu.com&#39;, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;name&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: True, &#39;value&#39;: &#39;germey&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1594790583, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_gid&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;GA1.2.1462052348.1594704184&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1657776183, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_ga&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;GA1.2.1542833660.1594704184&#39;&#125;, &#123;&#39;domain&#39;: &#39;www.zhihu.com&#39;, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;KLBRSID&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;031b5396d5ab406499e2ac6fe1bb1a43|1594704183|1594704182&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1626240183, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;1594704184&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;1594704184&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1594704243, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_gat_gtag_UA_149949619_1&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;1&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1689312182, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;d_c0&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;&quot;ABBSJ1oFkxGPTirgBoF55isXJsyZ7AHpPfI&#x3D;|1594704182&quot;&#39;&#125;, &#123;&#39;domain&#39;: &#39;www.zhihu.com&#39;, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;SESSIONID&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;9dviPRsE7McwBJnMo9mpFtJwci26vXThpMAk4aguPv2&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_xsrf&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;99a2430a-941e-49f1-bc70-132ac12adda6&#39;&#125;, &#123;&#39;domain&#39;: &#39;.zhihu.com&#39;, &#39;expiry&#39;: 1657776182, &#39;httpOnly&#39;: False, &#39;name&#39;: &#39;_zap&#39;, &#39;path&#39;: &#39;&#x2F;&#39;, &#39;secure&#39;: False, &#39;value&#39;: &#39;44078cd7-5d9b-4f68-a673-6dd9532aad61&#39;&#125;][]</code></pre><hr><h5 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h5><p>在访问网页的时候，我们通常会开启多个选项卡。而在 Selenium 中也可以对选项卡进行操作：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.open()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://python.org'</span><span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">[&#39;CDwindow-9833CBA347F30F83AA57A71A2D98ECC7&#39;, &#39;CDwindow-4542CB4D2539341C9EF511F46A46EE6A&#39;]</code></pre><p>首先访问百度，然后调用 execute_script 方法，传入 JavaScript 语句 window.open，新开启一个选项卡，调用 window_handles 属性获取当前开启的所有选项卡的代号列表。调用 switch_to.window 方法即可切换选项卡，参数是选项卡的代号。此处将第 2 个选项卡代号传入，即跳转到第 2 个选项卡，接下来在第 2 个选项卡下访问淘宝，然后重新调用 switch_to.window 方法返回第 1 个选项卡，再访问 Python 官网。</p><hr><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><p>在使用 Selenium 的过程中，难免会遇到一些异常，例如超时、节点未找到等错误，一旦出现此类错误，程序便不会继续运行了。这里我们可以使用 try except 语句来捕获各种异常。</p><p>首先，演示一下节点未找到的异常：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">NoSuchElementException: no such element: Unable to locate element: &#123;&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;[id&#x3D;&quot;hello&quot;]&quot;&#125;  (Session info: chrome&#x3D;83.0.4103.116)</code></pre><p>此处抛出了 NoSuchElementException 异常，通常代表节点未找到。</p><p>为了防止程序遇到异常而中断，我们需要捕获异常：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> TimeoutException<span class="token punctuation">,</span> NoSuchElementExceptionbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">except</span> TimeoutException<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Time Out'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">except</span> NoSuchElementException<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No Element'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><pre class="language-none"><code class="language-none">No Element</code></pre><hr><h5 id="反屏蔽"><a href="#反屏蔽" class="headerlink" title="反屏蔽"></a>反屏蔽</h5><p>如今很多网站都加上了对 Selenium 的检测，来防止一些爬虫的恶意爬取。检测的基本原理是检测当前浏览器窗口下的 window.navigator 对象是否包含 webdriver 属性。在正常使用浏览器的情况下，这个属性是 undefined，一旦我们使用了 Selenium，Selenium 会给 window.navigator 设置 webdriver 属性。很多网站就通过 JavaScript 判断，如果 webdriver 属性存在，则直接屏蔽。</p><p>有一个典型的案例网站：<code>https://antispider1.scrape.cuiqingcai.com/</code>，它使用了上述原理实现了 WebDriver 的检测，如果使用 Selenium 直接爬取的话，则返回如下页面：<br><img src="https://img-blog.csdnimg.cn/20200714152051399.png?0x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>或许可以使用 JavaScript，通过调用 execute_script 方法把 webdriver 属性置空：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>navigator<span class="token punctuation">,</span> <span class="token string">"webdriver"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>该 JavaScript 代码的确可以把 webdriver 属性置空，但 execute_script 调用该 JavaScript 语句实际上是在页面加载完毕之后才执行的，这太迟了，网站早在最初页面渲染之前就已经对 webdriver 属性进行了检测，所以上述方法不能达到效果。</p><p>然而在 Selenium 中可以使用 CDP（Chrome Devtools-Protocol，Chrome 开发工具协议）来解决该问题，通过 CDP 可以实现在每个页面刚加载时执行 JavaScript 代码，执行的 CDP 方法为 Page.addScriptToEvaluateOnNewDocument，然后传入上述的 JavaScript 代码即可在每次页面加载之前将 webdriver 属性置空。另外可以加入几个选项来隐藏 WebDriver 提示条和自动化扩展信息：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptionsoption <span class="token operator">=</span> ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'useAutomationExtension'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>execute_cdp_cmd<span class="token punctuation">(</span><span class="token string">'Page.addScriptToEvaluateOnNewDocument'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   <span class="token string">'source'</span><span class="token punctuation">:</span> <span class="token string">'Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://antispider1.scrape.cuiqingcai.com/'</span><span class="token punctuation">)</span></code></pre><p><strong>Output：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200714155451753.png?0x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>对于大多数的情况，以上方法均可以实现 Selenium 反屏蔽。但对于一些特殊的网站，如果其有更多的 WebDriver 特征检测，则需具体排查。</p><hr><h5 id="无头模式"><a href="#无头模式" class="headerlink" title="无头模式"></a>无头模式</h5><p>上述案例运行时，总会弹出一个浏览器窗口，虽然有助于观察页面爬取状况，但有时窗口弹来弹去也会形成干扰。</p><p>Chrome 浏览器从 60 版本已经支持了无头模式，即 Headless。无头模式在运行时不会弹出浏览器窗口，减少了干扰和一些资源（如图片等）的加载，所以在一定程度上节省了资源加载时间和网络带宽。</p><p>我们可以借助 ChromeOptions 来开启 Chrome Headless 模式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptionsoption <span class="token operator">=</span> <span class="token function">ChromeOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span><span class="token function">add_argument</span><span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span><span class="token function">Chrome</span><span class="token punctuation">(</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span>browser<span class="token punctuation">.</span><span class="token function">set_window_size</span><span class="token punctuation">(</span><span class="token number">1366</span><span class="token punctuation">,</span> <span class="token number">768</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span><span class="token function">get_screenshot_as_file</span><span class="token punctuation">(</span><span class="token string">'preview.png'</span><span class="token punctuation">)</span></code></pre><p>此处通过 ChromeOptions 的 add_argument 方法添加了参数 –headless，开启了无头模式。在无头模式下，最好设置窗口大小，接着打开页面，最后调用 get_screenshot_as_file 方法输出页面截图。</p><p>运行代码，Chrome 窗口没有弹出来，而代码依然正常运行，最后输出页面截图 <strong><code>preview.png</code>：</strong><br><img src="https://img-blog.csdnimg.cn/20200714160036407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>这样就在无头模式下完成了页面的抓取和截图操作。</p><p>以上就是 Selenium 的基本使用，有了 Selenium，处理 JavaScript 渲染的页面就不难了。</p><hr><p>Reference：<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1675">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1675</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为何使用-Selenium&quot;&gt;&lt;a href=&quot;#为何使用-Selenium&quot; class=&quot;headerlink&quot; title=&quot;为何使用 Selenium&quot;&gt;&lt;/a&gt;为何使用 Selenium&lt;/h2&gt;&lt;p&gt;在很多情况下，Ajax 请求的接口通常会包含加密的参</summary>
      
    
    
    
    <category term="Selenium" scheme="http://giyn.work/categories/Selenium/"/>
    
    
    <category term="Python" scheme="http://giyn.work/tags/Python/"/>
    
    <category term="Selenium" scheme="http://giyn.work/tags/Selenium/"/>
    
    <category term="WebCrawler" scheme="http://giyn.work/tags/WebCrawler/"/>
    
  </entry>
  
  <entry>
    <title>Ajax 的原理和分析</title>
    <link href="http://giyn.work/posts/abf1e3d2/"/>
    <id>http://giyn.work/posts/abf1e3d2/</id>
    <published>2020-09-25T14:50:27.000Z</published>
    <updated>2020-09-26T03:28:31.697Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是-Ajax"><a href="#什么是-Ajax" class="headerlink" title="什么是 Ajax"></a>什么是 Ajax</h4><p>Ajax，全称为 Asynchronous JavaScript and XML，即异步的 JavaScript 和 XML。它是一种利用 JavaScript 在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页的技术。</p><h4 id="Ajax-的优点"><a href="#Ajax-的优点" class="headerlink" title="Ajax 的优点"></a>Ajax 的优点</h4><p>对于传统的网页，如果想更新其内容则必须刷新整个页面。有了 Ajax，便可以在页面不被全部刷新的情况下更新其内容。在此过程中，页面实际上在后台与服务器进行了数据交互，获取到数据之后，再利用 JavaScript 改变网页，这样网页内容就会更新了。如果网页的原始 HTML 不包含任何数据，数据都是通过 Ajax 统一加载后再呈现出来的，这在 Web 开发上可以做到前后端分离，并且降低服务器直接渲染页面带来的压力，也可以有效防止爬虫。</p><h4 id="尝试抓取-Ajax-加载的页面"><a href="#尝试抓取-Ajax-加载的页面" class="headerlink" title="尝试抓取 Ajax 加载的页面"></a>尝试抓取 Ajax 加载的页面</h4><p>在看到浏览器中正常显示的页面之后，尝试使用 requests 抓取页面时，得到的结果如果和在浏览器中看到的不一样，可能是因为 requests 获取的是原始 HTML 文档，而浏览器中的页面是经过 JavaScript 数据处理后生成的结果，这些数据的来源可能是通过 Ajax 加载的。</p><h4 id="如何抓取-Ajax-加载的页面"><a href="#如何抓取-Ajax-加载的页面" class="headerlink" title="如何抓取 Ajax 加载的页面"></a>如何抓取 Ajax 加载的页面</h4><p>对于 Ajax，数据加载是一种异步加载方式，原始页面不会包含某些数据，只有在加载完后，才会向服务器请求某个接口获取数据，然后数据才被处理从而呈现到网页上，这个过程实际上就是向服务器接口发送了一个 Ajax 请求。此时我们需要分析网页后台向接口发送的 Ajax 请求，用 requests 来模拟 Ajax 请求，就可以成功抓取页面了。</p><h4 id="Ajax-基本原理"><a href="#Ajax-基本原理" class="headerlink" title="Ajax 基本原理"></a>Ajax 基本原理</h4><p>发送 Ajax 请求到网页更新的过程可以简单分为以下 3 步：</p><ol><li>发送请求</li><li>解析内容</li><li>渲染网页</li></ol><p>这 3 个步骤其实都是由 JavaScript 完成的。</p><h4 id="Ajax-分析"><a href="#Ajax-分析" class="headerlink" title="Ajax 分析"></a>Ajax 分析</h4><p>下面以豆瓣电影为例，我们进入电影分类页面：</p><img src="https://img-blog.csdnimg.cn/20200712154101276.png" width="70%" loading="lazy"><p>下拉到页面底部，我们可以看到 <code>加载更多</code> 的按钮：</p><img src="https://img-blog.csdnimg.cn/20200712154757912.png" width="70%" loading="lazy"><p>点击 <code>加载更多</code> 之后，加载了一些新的电影，而页面的 URL 并没有发生改变：</p><img src="https://img-blog.csdnimg.cn/20200712154715362.png" width="70%" loading="lazy"><h4 id="如何查看-Ajax-请求"><a href="#如何查看-Ajax-请求" class="headerlink" title="如何查看 Ajax 请求"></a>如何查看 Ajax 请求</h4><p>要想查看 Ajax 请求，我们可以借助 Chrome 的开发者工具，借助它可以看到页面加载过程中浏览器与服务器之间发送请求和接收响应的所有记录。</p><blockquote><p>Ajax 有其特殊的请求类型，它叫作 XHR（XMLHttpRequest）。</p></blockquote><p>点击 <code>加载更多</code> 后，可以发现一个新的请求，其 Type 为 xhr，这就是一个 Ajax 请求。</p><p><img src="https://img-blog.csdnimg.cn/20200712162826512.png?0x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>用鼠标点击这个请求，可以查看这个请求的详细信息：</p><p><img src="https://img-blog.csdnimg.cn/20200712162902330.png?0x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>在右侧我们可以观察到 Request Headers、URL 和 Response Headers 等信息。</p><p>点击 Preview，即可看到响应的内容，它是 JSON 格式的。此处 Chrome 自动做了解析，点击箭头即可展开和收起相应内容：</p><p><img src="https://img-blog.csdnimg.cn/20200712164430440.png?0x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>JavaScript 接收到这些数据之后，再执行相应的渲染方法，整个页面就渲染出来了。</p><p>另外，我们也可以切换到 Response 选项卡，从中观察到真实的返回数据：</p><p><img src="https://img-blog.csdnimg.cn/20200712164531410.png" alt="在这里插入图片描述" loading="lazy"></p><p>接下来，切回到第一个请求，观察一下它的 Response：</p><p><img src="https://img-blog.csdnimg.cn/20200712164656808.png?0x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>这就是最原始 URL 返回的结果，其代码结构也非常简单，只是执行了一些 JavaScript。</p><p>因此，我们看到的页面的真实数据并不是最原始的页面返回的，而是在执行 JavaScript 后再次向后台发送 Ajax 请求，浏览器拿到数据后进一步渲染出来的。</p><h4 id="如何模拟-Ajax-请求"><a href="#如何模拟-Ajax-请求" class="headerlink" title="如何模拟 Ajax 请求"></a>如何模拟 Ajax 请求</h4><p>利用 Chrome 开发者工具的筛选功能筛选出所有的 Ajax 请求。在请求的上方有一层筛选栏，直接点击 XHR，此时在下方显示的所有请求都是 Ajax 请求，然后不断点击 <code>加载更多</code>，就能捕获所有的 Ajax请求了：<br><img src="https://img-blog.csdnimg.cn/20200712165230656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk2MTc3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>随意点开一个条目，都可以清楚地看到其 Request URL、Request Headers、Response Headers、Response Body 等内容，此时只需要用程序模拟这些 Ajax 请求，就可以轻松提取我们所需要的信息了。</p><p>Reference：<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1673">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1673</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是-Ajax&quot;&gt;&lt;a href=&quot;#什么是-Ajax&quot; class=&quot;headerlink&quot; title=&quot;什么是 Ajax&quot;&gt;&lt;/a&gt;什么是 Ajax&lt;/h4&gt;&lt;p&gt;Ajax，全称为 Asynchronous JavaScript and XML，即异步的 </summary>
      
    
    
    
    <category term="HTTP" scheme="http://giyn.work/categories/HTTP/"/>
    
    
    <category term="HTTP" scheme="http://giyn.work/tags/HTTP/"/>
    
    <category term="Ajax" scheme="http://giyn.work/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>多进程基本原理及 Python 实现</title>
    <link href="http://giyn.work/posts/ad732d83/"/>
    <id>http://giyn.work/posts/ad732d83/</id>
    <published>2020-09-25T14:44:19.000Z</published>
    <updated>2020-09-26T03:28:31.853Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多进程的含义"><a href="#多进程的含义" class="headerlink" title="多进程的含义"></a>多进程的含义</h3><p><strong>进程（Process）</strong><br>是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。</p><p>多进程就是启用多个进程同时运行。</p><h3 id="Python-多进程的优势"><a href="#Python-多进程的优势" class="headerlink" title="Python 多进程的优势"></a>Python 多进程的优势</h3><p>由于进程中 GIL 的存在，Python 中的多线程并不能很好地发挥多核优势，<strong>一个进程中的多个线程，同一时刻只能有一个线程运行</strong>。</p><blockquote><p>在 Python 多线程下，每个线程的执行方式如下：</p><ul><li>获取 GIL。</li><li>执行对应线程的代码。</li><li>释放 GIL。</li></ul></blockquote><p>对于多进程来说，<strong>每个进程都有属于自己的 GIL</strong>，所以在多核处理器下，多进程的运行是不会受 GIL 的影响的，<strong>多进程能更好地发挥多核的优势</strong>。</p><p>Python 的多进程整体来看是比多线程更有优势，在条件允许的情况下，能用多进程就尽量用多进程。</p><p>由于进程是系统进行资源分配和调度的一个独立单位，所以各个进程之间的数据是无法共享的。</p><h3 id="多进程的实现"><a href="#多进程的实现" class="headerlink" title="多进程的实现"></a>多进程的实现</h3><img src="https://img-blog.csdnimg.cn/20200603205921259.png" width="50%" loading="lazy"><ul><li><h4 id="直接使用-Process-类"><a href="#直接使用-Process-类" class="headerlink" title="直接使用 Process 类"></a>直接使用 Process 类</h4></li></ul><p>在 multiprocessing 中，每进程都用一个 Process 类来表示。</p><p>API 调用：Process([group [, target [, name [, args [, kwargs]]]]])</p><ul><li><strong>target</strong> 表示调用对象，可以传入方法的名字。</li><li><strong>args</strong> 表示被调用对象的位置参数元组。<br>比如 target 是函数 func，它有两个参数 m，n，那么 args 就传入 [m, n] 即可。</li><li><strong>kwargs</strong> 表示调用对象的字典。</li><li><strong>name</strong> 是别名，相当于给这个进程取一个名字。</li><li><strong>group</strong> 分组。</li></ul><p><strong>实例：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Process: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>process<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Process: 0Process: 1Process: 2Process: 3Process: 4</code></pre><p><strong>multiprocessing 还提供了几个比较有用的方法：</strong></p><ul><li>通过 cpu_count 方法来获取当前机器 CPU 的核心数量</li><li>通过 active_children 方法获取当前还在运行的所有进程</li></ul><p><strong>实例：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Process: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>process<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'CPU number: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> multiprocessing<span class="token punctuation">.</span>active_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Child process name: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> id: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Process Ended'</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Process: 0CPU number: 8Child process name: Process-5 id: 73595Child process name: Process-2 id: 73592Child process name: Process-3 id: 73593Child process name: Process-4 id: 73594Process EndedProcess: 1Process: 2Process: 3Process: 4</code></pre><ul><li><h4 id="继承Process类"><a href="#继承Process类" class="headerlink" title="继承Process类"></a>继承Process类</h4><p>创建进程的方式不止一种，也可以像线程 Thread 一样，通过继承的方式创建一个进程类，进程的基本操作在子类的 run 方法中实现即可。</p></li></ul><p><strong>实例：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">:</span>        Process<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>loop <span class="token operator">=</span> loop    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> count <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Pid: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>pid<span class="token punctuation">&#125;</span></span><span class="token string"> LoopCount: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> MyProcess<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>这里进程的执行逻辑需要在 run 方法中实现，启动进程需要调用 start 方法，调用之后 run 方法便会执行。</p></blockquote><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Pid: 73667 LoopCount: 0Pid: 73668 LoopCount: 0Pid: 73669 LoopCount: 0Pid: 73667 LoopCount: 1Pid: 73668 LoopCount: 1Pid: 73669 LoopCount: 1Pid: 73668 LoopCount: 2Pid: 73669 LoopCount: 2Pid: 73669 LoopCount: 3</code></pre><blockquote><p>这里的进程 pid 代表进程号，不同机器、不同时刻运行结果可能不同。</p></blockquote><blockquote><p>通过上面的方式，我们也非常方便地实现了一个进程的定义。<br>为了复用方便，我们可以把一些方法写在每个进程类里封装好，在使用时直接初始化一个进程类运行即可。</p></blockquote><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>在多进程中，同样存在守护进程的概念，如果一个进程被设置为守护进程，当父进程结束后，子进程会自动被终止，我们可以通过设置 daemon 属性来控制是否为守护进程。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">:</span>        Process<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>loop <span class="token operator">=</span> loop    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> count <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Pid: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>pid<span class="token punctuation">&#125;</span></span><span class="token string"> LoopCount: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> MyProcess<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Main Process ended'</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Main Process ended</code></pre><p>结果很简单，因为主进程没有做任何事情，直接输出一句话结束，所以在这时也直接终止了子进程的运行。</p><p>这样可以有效防止无控制地生成子进程。这样的写法可以让我们在主进程运行结束后无需额外担心子进程是否关闭，避免了独立子进程的运行。</p><h3 id="进程等待"><a href="#进程等待" class="headerlink" title="进程等待"></a>进程等待</h3><p>上面的运行效果其实不太符合我们预期：主进程运行结束时，子进程（守护进程）也都退出了，子进程什么都没来得及执行。</p><p>加入 join 方法即可让所有子进程都执行完再结束：</p><pre class="language-python" data-language="python"><code class="language-python">processes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> MyProcess<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    processes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> processes<span class="token punctuation">:</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Pid: 40866 LoopCount: 0Pid: 40867 LoopCount: 0Pid: 40868 LoopCount: 0Pid: 40866 LoopCount: 1Pid: 40867 LoopCount: 1Pid: 40868 LoopCount: 1Pid: 40867 LoopCount: 2Pid: 40868 LoopCount: 2Pid: 40868 LoopCount: 3Main Process ended</code></pre><p>在调用 start 和 join 方法后，父进程就可以等待所有子进程都执行完毕后，再打印出结束的结果。</p><p>默认情况下，join 是无限期的。也就是说，如果有子进程没有运行完毕，主进程会一直等待。这种情况下，如果子进程出现问题陷入了死循环，主进程也会无限等待下去。怎么解决这个问题呢？可以给 join 方法传递一个超时参数，代表最长等待秒数。如果子进程没有在这个指定秒数之内完成，会被强制返回，主进程不再会等待。也就是说这个参数设置了主进程等待该子进程的最长时间。</p><p>例如这里我们传入 1，代表最长等待 1 秒，代码改写如下：</p><pre class="language-python" data-language="python"><code class="language-python">processes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> MyProcess<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    processes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> processes<span class="token punctuation">:</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Pid: 40970 LoopCount: 0Pid: 40971 LoopCount: 0Pid: 40970 LoopCount: 1Pid: 40971 LoopCount: 1Main Process ended</code></pre><p>可以看到，有的子进程本来要运行 3 秒，结果运行 1 秒就被强制返回了，由于是守护进程，该子进程被终止了。</p><h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><p>终止进程不止有守护进程这一种做法，也可以通过 terminate 方法来终止某个子进程，另外还可以通过 is_alive 方法判断进程是否还在运行：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Starting'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finished'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>process<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Before:'</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'During:'</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Terminate:'</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Joined:'</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>此处用 Process 创建了一个进程，接着调用 start 方法启动这个进程，然后调用 terminate 方法将进程终止，最后调用 join 方法。</p><p>另外，在进程运行不同的阶段，还通过 is_alive 方法判断当前进程是否还在运行。</p><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Before: &lt;Process(Process-1, initial)&gt; FalseDuring: &lt;Process(Process-1, started)&gt; TrueTerminate: &lt;Process(Process-1, started)&gt; TrueJoined: &lt;Process(Process-1, stopped[SIGTERM])&gt; False</code></pre><p>这里有一个值得注意的地方，在调用 terminate 方法之后，用 is_alive 方法获取进程的状态发现依然还是运行状态。在调用 join 方法之后，is_alive 方法获取进程的运行状态才变为终止状态。</p><p>所以，在调用 terminate 方法之后，记得要调用一下 join 方法，这里调用 join 方法可以为进程提供时间来更新对象状态，用来反映出最终的进程终止效果。</p><h3 id="进程互斥锁"><a href="#进程互斥锁" class="headerlink" title="进程互斥锁"></a>进程互斥锁</h3><p>在上面的一些实例中，可能会遇到如下的运行结果：</p><pre class="language-none"><code class="language-none">Pid: 73993 LoopCount: 0Pid: 73993 LoopCount: 1Pid: 73994 LoopCount: 0Pid: 73994 LoopCount: 1Pid: 73994 LoopCount: 2Pid: 73995 LoopCount: 0Pid: 73995 LoopCount: 1Pid: 73995 LoopCount: 2Pid: 73995 LoopCount: 3Main Process ended</code></pre><p><strong>有的输出结果没有换行。</strong></p><p>这种情况是由多个进程并行执行导致的，两个进程同时进行了输出，结果第一个进程的换行没有来得及输出，第二个进程就输出了结果，导致最终输出没有换行。</p><p>如果能保证多个进程运行期间的任一时间，只能一个进程输出，其他进程等待，等刚才那个进程输出完毕之后，另一个进程再进行输出，这样就不会出现输出没有换行的现象了。</p><p>这种解决方案实际上就是实现了进程互斥，避免了多个进程同时抢占临界区（输出）资源。</p><p><strong>可以通过 multiprocessing 中的 Lock 来实现。</strong></p><p>Lock，即锁，在一个进程输出时，加锁，其他进程等待。等此进程执行结束后，释放锁，其他进程可以进行输出。</p><p><strong>首先实现一个不加锁的实例：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Lock<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loop<span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">:</span>        Process<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>loop <span class="token operator">=</span> loop        self<span class="token punctuation">.</span>lock <span class="token operator">=</span> lock    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> count <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>            <span class="token comment"># self.lock.acquire()</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Pid: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>pid<span class="token punctuation">&#125;</span></span><span class="token string"> LoopCount: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            <span class="token comment"># self.lock.release()</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> MyProcess<span class="token punctuation">(</span>i<span class="token punctuation">,</span> lock<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Pid: 74030 LoopCount: 0Pid: 74031 LoopCount: 0Pid: 74032 LoopCount: 0Pid: 74033 LoopCount: 0Pid: 74034 LoopCount: 0Pid: 74030 LoopCount: 1Pid: 74031 LoopCount: 1Pid: 74032 LoopCount: 1Pid: 74033 LoopCount: 1Pid: 74034 LoopCount: 1Pid: 74030 LoopCount: 2...</code></pre><p>可以看到运行结果中有些输出已经出现了不换行的问题。</p><p>对其加锁，取消掉刚才代码中的两行注释，重新运行。</p><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Pid: 74061 LoopCount: 0Pid: 74062 LoopCount: 0Pid: 74063 LoopCount: 0Pid: 74064 LoopCount: 0Pid: 74065 LoopCount: 0Pid: 74061 LoopCount: 1Pid: 74062 LoopCount: 1Pid: 74063 LoopCount: 1Pid: 74064 LoopCount: 1Pid: 74065 LoopCount: 1Pid: 74061 LoopCount: 2Pid: 74062 LoopCount: 2Pid: 74064 LoopCount: 2...</code></pre><p>这时输出效果就正常了。</p><p>所以，在访问一些临界区资源时，使用 Lock 可以有效避免进程同时占用资源而导致的一些问题。</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>进程互斥锁可以使同一时刻只有一个进程能访问共享资源，如上面的例子所展示的那样，在同一时刻只能有一个进程输出结果。但有时候需要允许多个进程来访问共享资源，同时还需要限制能访问共享资源的进程的数量。</p><p>这种需求该如何实现呢？可以用信号量，信号量是进程同步过程中一个比较重要的角色。它可以控制临界资源的数量，实现多个进程同时访问共享资源，限制进程的并发量。</p><p><strong>可以用 multiprocessing 库中的 Semaphore 来实现信号量。</strong></p><p>进程之间利用 Semaphore 做到多个进程共享资源，同时又限制同时可访问的进程数量：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Semaphore<span class="token punctuation">,</span> Lock<span class="token punctuation">,</span> Queue<span class="token keyword">import</span> time<span class="token builtin">buffer</span> <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>empty <span class="token operator">=</span> Semaphore<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>full <span class="token operator">=</span> Semaphore<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> <span class="token builtin">buffer</span><span class="token punctuation">,</span> empty<span class="token punctuation">,</span> full<span class="token punctuation">,</span> lock        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            full<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token builtin">buffer</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Consumer pop an element'</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            empty<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> <span class="token builtin">buffer</span><span class="token punctuation">,</span> empty<span class="token punctuation">,</span> full<span class="token punctuation">,</span> lock        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            empty<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token builtin">buffer</span><span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Producer append an element'</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            full<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Producer<span class="token punctuation">(</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> Consumer<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>daemon <span class="token operator">=</span> c<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Main Process Ended'</span><span class="token punctuation">)</span></code></pre><blockquote><p>如上代码实现了经典的生产者和消费者问题。它定义了两个进程类，一个是消费者，一个是生产者。</p></blockquote><p>另外，这里使用 multiprocessing 中的 Queue 定义了一个共享队列，然后定义了两个信号量 Semaphore，一个代表缓冲区空余数，一个表示缓冲区占用数。</p><p>生产者 Producer 使用 acquire 方法来占用一个缓冲区位置，缓冲区空闲区大小减 1，接下来进行加锁，对缓冲区进行操作，然后释放锁，最后让代表占用的缓冲区位置数量加 1，消费者则相反。</p><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Producer append an elementProducer append an elementConsumer pop an elementConsumer pop an elementProducer append an elementProducer append an elementConsumer pop an elementConsumer pop an elementProducer append an elementProducer append an elementConsumer pop an elementConsumer pop an elementProducer append an elementProducer append an element</code></pre><p>可以发现两个进程在交替运行，生产者先放入缓冲区物品，然后消费者取出，不停地进行循环。 可以通过上面的例子来体会信号量 Semaphore 的用法，通过 Semaphore 很好地控制了进程对资源的并发访问数量。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>在上面的例子中使用 Queue 作为进程通信的共享队列使用。</p><p>而如果把上面程序中的 Queue 换成普通的 list，是完全起不到效果的，因为进程和进程之间的资源是不共享的。即使在一个进程中改变了这个 list，在另一个进程也不能获取到这个 list 的状态，所以声明全局变量对多进程是没有用处的。</p><p>那进程如何共享数据呢？可以用 Queue，即队列。<strong>这里的队列指的是 multiprocessing 里面的 Queue。</strong></p><p>依然用上面的例子，<strong>一个进程向队列中放入随机数据，然后另一个进程取出数据：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Semaphore<span class="token punctuation">,</span> Lock<span class="token punctuation">,</span> Queue<span class="token keyword">import</span> time<span class="token keyword">from</span> random <span class="token keyword">import</span> random<span class="token builtin">buffer</span> <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>empty <span class="token operator">=</span> Semaphore<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>full <span class="token operator">=</span> Semaphore<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> <span class="token builtin">buffer</span><span class="token punctuation">,</span> empty<span class="token punctuation">,</span> full<span class="token punctuation">,</span> lock        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            full<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Consumer get </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            empty<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> <span class="token builtin">buffer</span><span class="token punctuation">,</span> empty<span class="token punctuation">,</span> full<span class="token punctuation">,</span> lock        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            empty<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            num <span class="token operator">=</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Producer put </span><span class="token interpolation"><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            <span class="token builtin">buffer</span><span class="token punctuation">.</span>put<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            full<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Producer<span class="token punctuation">(</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> Consumer<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>daemon <span class="token operator">=</span> c<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Main Process Ended'</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Producer put  0.719213647437Producer put  0.44287326683Consumer get 0.719213647437Consumer get 0.44287326683Producer put  0.722859424381Producer put  0.525321338921Consumer get 0.722859424381Consumer get 0.525321338921</code></pre><p>在上面的例子中声明了两个进程，一个进程为生产者 Producer，另一个为消费者 Consumer，生产者不断向 Queue 里面添加随机数，消费者不断从队列里面取随机数。</p><p>生产者在放数据的时候调用了 Queue 的 put 方法，消费者在取的时候使用了 get 方法，这样就通过 Queue 实现两个进程的数据共享了。</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>刚才使用 Queue 实现了进程间的数据共享，那么进程之间直接通信，如收发信息，用什么比较好呢？可以用 Pipe，管道。</p><p>管道，可以把它理解为两个进程之间通信的通道。管道可以是单向的，即 half-duplex：一个进程负责发消息，另一个进程负责收消息；也可以是双向的 duplex，即互相收发消息。</p><p>默认声明 Pipe 对象是双向管道，如果要创建单向管道，可以在初始化的时候传入 deplex 参数为 False。</p><p><strong>实例：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Pipe<span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pipe<span class="token punctuation">)</span><span class="token punctuation">:</span>        Process<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pipe <span class="token operator">=</span> pipe    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pipe<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Consumer Words'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Consumer Received: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>pipe<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pipe<span class="token punctuation">)</span><span class="token punctuation">:</span>        Process<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pipe <span class="token operator">=</span> pipe    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Producer Received: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>pipe<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pipe<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Producer Words'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pipe <span class="token operator">=</span> Pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Producer<span class="token punctuation">(</span>pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> Consumer<span class="token punctuation">(</span>pipe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>daemon <span class="token operator">=</span> c<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Main Process Ended'</span><span class="token punctuation">)</span></code></pre><p>在这个例子里声明了一个默认为双向的管道，然后将管道的两端分别传给两个进程。两个进程互相收发。</p><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Producer Received: Consumer WordsConsumer Received: Producer WordsMain Process Ended</code></pre><p>管道 Pipe 就像进程之间搭建的桥梁，利用它就可以很方便地实现进程间通信了。</p><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p>根据前面知道了可以使用 Process 来创建进程，同时也知道了如何用 Semaphore 来控制进程的并发执行数量。</p><p>假如现在有 10000 个任务，每个任务需要启动一个进程来执行，并且一个进程运行完毕之后要紧接着启动下一个进程，同时还需要控制进程的并发数量，不能并发太高，不然 CPU 处理不过来（如果同时运行的进程能维持在一个最高恒定值当然利用率是最高的）。</p><p>那么该如何来实现这个需求呢？</p><p>用 Process 和 Semaphore 可以实现，但是实现起来比较烦琐。而这种需求在平时又是非常常见的。此时就可以派上进程池了，即 multiprocessing 中的 Pool。</p><p>Pool 可以提供指定数量的进程，供用户调用，当有新的请求提交到 pool 中时，如果池还没有满，就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行它。</p><p><strong>实例：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Start process: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'End process </span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>function<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Main Process started'</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Main Process ended'</span><span class="token punctuation">)</span></code></pre><p>在这个例子中声明了一个大小为 3 的进程池，通过 processes 参数来指定，如果不指定，那么会自动根据处理器内核来分配进程数。接着使用 apply_async 方法将进程添加进去，args 可以用来传递参数。</p><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Main Process startedStart process: 0Start process: 1Start process: 2End process 0End process 1End process 2Start process: 3End process 3Main Process ended</code></pre><p>进程池大小为 3，所以最初可以看到有 3 个进程同时执行，第4个进程在等待，在有进程运行完毕之后，第4个进程马上跟着运行，出现了如上的运行效果。</p><p>最后，要记得调用 close 方法来关闭进程池，使其不再接受新的任务，然后调用 join 方法让主进程等待子进程的退出，等子进程运行完毕之后，主进程接着运行并结束。</p><p>不过上面的写法多少有些烦琐，这里再介绍进程池一个更好用的 map 方法，可以将上述写法简化很多。</p><p>map 方法是怎么用的呢？第一个参数就是要启动的进程对应的执行方法，第 2 个参数是一个可迭代对象，其中的每个元素会被传递给这个执行方法。</p><p>举个例子：现在有一个 list，里面包含了很多 URL，另外也定义了一个方法用来抓取每个 URL 内容并解析，那么可以直接在 map 的第一个参数传入方法名，第 2 个参数传入 URL 数组。</p><p><strong>实例：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>error<span class="token keyword">def</span> <span class="token function">scrape</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'URL </span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string"> Scraped'</span></span><span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>HTTPError<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'URL </span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string"> not Scraped'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>        <span class="token string">'http://www.meituan.com/'</span><span class="token punctuation">,</span>        <span class="token string">'http://blog.csdn.net/'</span><span class="token punctuation">,</span>        <span class="token string">'http://xxxyxxx.net'</span>    <span class="token punctuation">]</span>    pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>scrape<span class="token punctuation">,</span> urls<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这个例子中先定义了一个 scrape 方法，它接收一个参数 url，这里就是请求了一下这个链接，然后输出爬取成功的信息，如果发生错误，则会输出爬取失败的信息。</p><p>首先要初始化一个 Pool，指定进程数为 3。然后声明一个 urls 列表，接着调用了 map 方法，第 1 个参数就是进程对应的执行方法，第 2 个参数就是 urls 列表，map 方法会依次将 urls 的每个元素作为 scrape 的参数传递并启动一个新的进程，加到进程池中执行。</p><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">URL https:&#x2F;&#x2F;www.baidu.com ScrapedURL http:&#x2F;&#x2F;xxxyxxx.net not ScrapedURL http:&#x2F;&#x2F;blog.csdn.net&#x2F; ScrapedURL http:&#x2F;&#x2F;www.meituan.com&#x2F; Scraped</code></pre><p>这样就可以实现 3 个进程并行运行。不同的进程相互独立地输出了对应的爬取结果。</p><p>可以看到，利用 Pool 的 map 方法非常方便地实现了多进程的执行。</p><p>Reference：<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1667">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1667</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;多进程的含义&quot;&gt;&lt;a href=&quot;#多进程的含义&quot; class=&quot;headerlink&quot; title=&quot;多进程的含义&quot;&gt;&lt;/a&gt;多进程的含义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;进程（Process）&lt;/strong&gt;&lt;br&gt;是具有一定独立功能的程序关于某个数据集合上的</summary>
      
    
    
    
    <category term="MultiProcessing" scheme="http://giyn.work/categories/MultiProcessing/"/>
    
    
    <category term="Python" scheme="http://giyn.work/tags/Python/"/>
    
    <category term="MultiProcessing" scheme="http://giyn.work/tags/MultiProcessing/"/>
    
  </entry>
  
  <entry>
    <title>多线程基本原理及 Python 实现</title>
    <link href="http://giyn.work/posts/61d9b63a/"/>
    <id>http://giyn.work/posts/61d9b63a/</id>
    <published>2020-09-25T14:37:27.000Z</published>
    <updated>2020-09-26T03:28:31.768Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程的含义"><a href="#多线程的含义" class="headerlink" title="多线程的含义"></a>多线程的含义</h3><p><strong>进程可以理解为是一个可以独立运行的程序单位。</strong></p><p>比如：</p><ul><li>打开一个浏览器，就开启了一个浏览器进程。</li><li>打开一个文本编辑器，就开启了一个文本编辑器进程。</li></ul><p><strong>一个进程中可以同时处理很多事情。</strong></p><p>比如：</p><ul><li>浏览器中可以在多个选项卡中打开多个页面，有的页面在播放音乐，有的页面在播放视频，有的网页在播放动画，可以同时运行，互不干扰。</li></ul><h6 id="为什么能同时做到同时运行这么多的任务呢？"><a href="#为什么能同时做到同时运行这么多的任务呢？" class="headerlink" title="为什么能同时做到同时运行这么多的任务呢？"></a>为什么能同时做到同时运行这么多的任务呢？</h6><p>任务对应着线程的执行。</p><p><strong>进程</strong> 是线程的集合，是由一个或多个线程构成的。<br><strong>线程</strong> 是操作系统进行运算调度的最小单位，是进程中的一个最小运行单元。</p><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><h5 id="并发（concurrency）"><a href="#并发（concurrency）" class="headerlink" title="并发（concurrency）"></a>并发（concurrency）</h5><p>指同一时刻只能有一条指令执行，但多个线程的对应的指令被快速轮换地执行，宏观上看起来多个线程在同时运行，但微观上只是这个处理器在连续不断地、在多个线程之间切换和执行。</p><blockquote><p>在单处理器和多处理器系统中都可以存在，仅靠一个核，就可以实现并发。</p></blockquote><h5 id="并行（parallel）"><a href="#并行（parallel）" class="headerlink" title="并行（parallel）"></a>并行（parallel）</h5><p>指同一时刻有多条指令在多个处理器上同时执行，并行必须要依赖于多个处理器，不论宏观上还是微观上，多个线程都是在同一时刻一起执行的。</p><blockquote><p>只能在多处理器系统中存在，如果计算机处理器只有一个核，就不可能实现并行。</p></blockquote><h3 id="多线程适用场景"><a href="#多线程适用场景" class="headerlink" title="多线程适用场景"></a>多线程适用场景</h3><p>在一个程序进程中，有些操作是比较耗时或者需要等待的。</p><p>比如：</p><ul><li>等待数据库的查询结果的返回</li><li>等待网页结果的响应</li></ul><p><strong>使用单线程：</strong><br>处理器必须要等到这些操作完成之后才能继续往下执行其他操作，而这个线程在等待的过程中，处理器明显是可以来执行其他操作的。</p><p><strong>使用多线程：</strong><br>处理器就可以在某个线程等待时，去执行其他的线程，从而从整体上提高执行效率。</p><p><strong>网络爬虫就是一个非常典型的例子</strong><br>爬虫在向服务器发起请求之后，有一段时间必须要等待服务器的响应返回，这种任务就属于 IO 密集型任务。</p><p><strong>但不是所有的任务都是 IO 密集型任务</strong><br>有一种任务叫作计算密集型任务，也可以称之为 CPU 密集型任务，就是任务的运行一直需要处理器的参与。</p><p>这时如果开启多线程，一个处理器从一个计算密集型任务切换到切换到另一个计算密集型任务上，处理器依然不会停下来，始终会忙于计算。</p><p>如果任务不全是计算密集型任务，可以使用多线程来提高程序整体的执行效率，尤其对于网络爬虫这种 IO 密集型任务来说，使用多线程会大大提高程序整体的爬取效率。</p><h3 id="Python-实现多线程"><a href="#Python-实现多线程" class="headerlink" title="Python 实现多线程"></a>Python 实现多线程</h3><blockquote><p><strong>在 Python 中，实现多线程的模块叫作 threading，是 Python 自带的模块。</strong></p></blockquote><h4 id="使用-threading-实现多线程的方法："><a href="#使用-threading-实现多线程的方法：" class="headerlink" title="使用 threading 实现多线程的方法："></a>使用 threading 实现多线程的方法：</h4><ul><li><h5 id="Thread-直接创建子线程"><a href="#Thread-直接创建子线程" class="headerlink" title="Thread 直接创建子线程"></a>Thread 直接创建子线程</h5><p>首先可以使用 Thread 类来创建一个线程，创建时需要指定 target 参数为运行的方法名称，如果被调用的方法需要传入额外的参数，则可以通过 Thread 的 args 参数来指定。</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is running'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> sleep </span><span class="token interpolation"><span class="token punctuation">&#123;</span>second<span class="token punctuation">&#125;</span></span><span class="token string">s'</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>second<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is ended'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is running'</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is ended'</span></span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Threading MainThread is runningThreading Thread-1 is runningThreading Thread-1 sleep 1sThreading Thread-2 is runningThreading Thread-2 sleep 5sThreading MainThread is endedThreading Thread-1 is endedThreading Thread-2 is ended</code></pre><p><strong>如果想要主线程等待子线程运行完毕之后才退出，可以让每个子线程对象都调用下 join 方法：</strong></p><pre class="language-python" data-language="python"><code class="language-python">threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Threading MainThread is runningThreading Thread-1 is runningThreading Thread-1 sleep 1sThreading Thread-2 is runningThreading Thread-2 sleep 5sThreading Thread-1 is endedThreading Thread-2 is endedThreading MainThread is ended</code></pre><ul><li><h5 id="继承-Thread-类创建子线程"><a href="#继承-Thread-类创建子线程" class="headerlink" title="继承 Thread 类创建子线程"></a>继承 Thread 类创建子线程</h5><p>另外也可以通过继承 Thread 类的方式创建一个线程，该线程需要执行的方法写在类的 run 方法里面即可。上面的例子的等价改写为：</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>second <span class="token operator">=</span> second        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is running'</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> sleep </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>second<span class="token punctuation">&#125;</span></span><span class="token string">s'</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>second<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is ended'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is running'</span></span><span class="token punctuation">)</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is ended'</span></span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Threading MainThread is runningThreading Thread-1 is running Threading Thread-1 sleep 1s Threading Thread-2 is running Threading Thread-2 sleep 5s Threading Thread-1 is ended Threading Thread-2 is ended Threading MainThread is ended </code></pre><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><p>在线程中有一个叫作守护线程的概念，如果一个线程被设置为守护线程，那么意味着这个线程是“不重要”的，这意味着，如果主线程结束了而该守护线程还没有运行完，那么它将会被强制结束。</p><p>在 Python 中我们可以通过 setDaemon 方法来将某个线程设置为守护线程：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is running'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> sleep </span><span class="token interpolation"><span class="token punctuation">&#123;</span>second<span class="token punctuation">&#125;</span></span><span class="token string">s'</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>second<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is ended'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is running'</span></span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Threading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is ended'</span></span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Threading MainThread is running Threading Thread-1 is running Threading Thread-1 sleep 2s Threading Thread-2 is running Threading Thread-2 sleep 5s Threading MainThread is ended Threading Thread-1 is ended </code></pre><blockquote><p>这里并没有调用 join 方法，如果让 t1 和 t2 都调用 join 方法，主线程就会仍然等待各个子线程执行完毕再退出，不论其是否是守护线程。</p></blockquote><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p>在一个进程中的多个线程是共享资源的，比如在一个进程中，有一个全局变量 count 用来计数，现在声明多个线程，每个线程运行时都给 count 加 1，代码实现如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timecount <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> count        temp <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span>        count <span class="token operator">=</span> tempthreads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Final count: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span></code></pre><p><strong>运行结果：</strong></p><pre class="language-none"><code class="language-none">Final count: 69 </code></pre><p>由于 count 这个值是共享的，每个线程都可以在执行 temp = count 这行代码时拿到当前 count 的值，但是这些线程中的一些线程可能是并发或者并行执行的，这就导致不同的线程拿到的可能是同一个 count 值，最后导致有些线程的 count 的加 1 操作并没有生效，导致最后的结果偏小。</p><p>所以，如果多个线程同时对某个数据进行读取或修改，就会出现不可预料的结果。为了避免这种情况，我们需要对多个线程进行同步，要实现同步，我们可以对需要操作的数据进行加锁保护，这里就需要用到 threading.Lock 了。</p><h4 id="加锁保护"><a href="#加锁保护" class="headerlink" title="加锁保护"></a>加锁保护</h4><p>某个线程在对数据进行操作前，需要先加锁，这样其他的线程发现被加锁了之后，就无法继续向下执行，会一直等待锁被释放，只有加锁的线程把锁释放了，其他的线程才能继续加锁并对数据做修改，修改完了再释放锁。</p><p>这样可以确保同一时间只有一个线程操作数据，多个线程不会再同时读取和修改同一个数据。</p><h3 id="Python多线程的问题"><a href="#Python多线程的问题" class="headerlink" title="Python多线程的问题"></a>Python多线程的问题</h3><p>GIL 全称为 Global Interpreter Lock，译为全局解释器锁。</p><p>在 Python 多线程下，每个线程的执行方式如下：</p><ul><li>获取 GIL。</li><li>执行对应线程的代码。</li><li>释放 GIL。</li></ul><p>可见，某个线程想要执行，必须先拿到 GIL，可以把 GIL 看作是通行证，并且在一个 Python 进程中，GIL 只有一个。拿不到通行证的线程，就不允许执行。这样就会导致，即使是多核条件下，一个 Python 进程下的多个线程，同一时刻也只能执行一个线程。</p><p>对于爬虫这种 IO 密集型任务来说，这个问题影响并不大；而对于计算密集型任务来说，由于 GIL 的存在，多线程总体的运行效率相比可能反而比单线程更低。</p><p>Reference：<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1666">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1666</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;多线程的含义&quot;&gt;&lt;a href=&quot;#多线程的含义&quot; class=&quot;headerlink&quot; title=&quot;多线程的含义&quot;&gt;&lt;/a&gt;多线程的含义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;进程可以理解为是一个可以独立运行的程序单位。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;</summary>
      
    
    
    
    <category term="MultiThreading" scheme="http://giyn.work/categories/MultiThreading/"/>
    
    
    <category term="Python" scheme="http://giyn.work/tags/Python/"/>
    
    <category term="MultiThreading" scheme="http://giyn.work/tags/MultiThreading/"/>
    
  </entry>
  
  <entry>
    <title>Session与Cookies</title>
    <link href="http://giyn.work/posts/a5d7ebc3/"/>
    <id>http://giyn.work/posts/a5d7ebc3/</id>
    <published>2020-09-25T14:33:43.000Z</published>
    <updated>2020-09-26T03:28:31.715Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态网页和动态网页"><a href="#静态网页和动态网页" class="headerlink" title="静态网页和动态网页"></a>静态网页和动态网页</h3><h5 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>This is a Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello,this is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span> </code></pre><p>这种网页内容由 HTML 代码编写，文字、图片等内容均通过写好的 HTML 代码来指定，页面叫作静态网页，加载速度快，编写简单。</p><p>但存在很大的缺陷，如可维护性差，不能根据URL灵活多变地显示内容等。因此，动态网页应运而生，它可以动态解析 URL 中参数的变化，关联数据库并动态呈现不同的页面内容，非常灵活多变。</p><p>而现在遇到的大多数网站都是动态网站，不再是一个简单的 HTML，可能是由 JSP、PHP、 Python 等语言编写的，其功能比静态网页强大和丰富太多。<strong>动态网站还可以实现用户登录和注册的功能</strong>。</p><h4 id="无状态-HTTP"><a href="#无状态-HTTP" class="headerlink" title="无状态 HTTP"></a>无状态 HTTP</h4><p>HTTP 特点之一就是无状态。</p><p>无状态是指 HTTP 协议对事务处理是没有记忆能力的，也就是说服务器不知道客户端是什么状态，意味着如果后续需要处理前面的信息，则必须重传，这也导致需要额外传递一些前面的重复请求，才能获取后续响应。</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>在服务端（网站的服务器）<br>用来保存用户的 Session 信息。</p><p>Session（会话） 本身的含义是指有始有终的一系列动作 / 消息。比如打电话时，从拿起电话拨号到挂断电话这中间的一系列过程可以称为一个 Session，在 Web 中，Session 对象用来存储特定用户 Session 所需的属性及配置信息。</p><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>在客户端（可以理解为浏览器端）<br>浏览器在下次访问网页时会自动附带上。<br>它发送给服务器，服务器通过识别 Cookies 并鉴定出是哪个用户，然后再判断用户是否是登录状态，进而返回对应的响应。</p><p>Cookies 指某些网站为了辨别用户身份、进行 Session 跟踪而存储在用户本地终端上的数据。</p><p><strong>当客户端第一次请求服务器时</strong><br>服务器会返回一个响应头中带有 Set-Cookie 字段的响应给客户端，用来标记是哪一个用户，客户端浏览器会把 Cookies 保存起来。</p><p><strong>当浏览器下一次再请求该网站时</strong><br>浏览器会把此 Cookies 放到请求头一起提交给服务器，Cookies 携带了 Session ID 信息，服务器检查 Cookies 即可找到对应的 Session 是什么，然后判断 Session 以此来辨认用户状态。</p><p><strong>在成功登录某个网站时</strong><br>服务器会告诉客户端设置哪些 Cookies 信息，在后续访问页面时客户端会把 Cookies 发送给服务器，服务器再找到对应的 Session 加以判断。如果 Session 中的某些设置登录状态的变量是有效的，就证明用户处于登录状态。<br>此时返回登录之后才可以查看的网页内容，浏览器再进行解析便可以看到了。</p><pre><code>Session（在服务端）、Cookies（在客户端），二者共同协作，实现了登录 Session 控制。</code></pre><img src="https://img-blog.csdnimg.cn/20200603092616239.png" width="50%" loading="lazy"><p>会话 Cookie 就是把 Cookie 放在浏览器内存里，浏览器在关闭之后该 Cookie 即失效。<br>持久 Cookie 则会保存到客户端的硬盘中，下次还可以继续使用，用于长久保持用户登录状态。</p><blockquote><p>实际上，没有会话 Cookie 和持久 Cookie 之分，只是由 Cookie 的 Max Age 或 Expires 字段决定了过期的时间。</p></blockquote><blockquote><p>在谈论 Session 机制时，常听到这样一种误解 —— “只要关闭浏览器，Session 就消失了”。对Session来说，除非程序通知服务器删除一个 Session，否则服务器会一直保留，比如程序一般都是在我们做注销操作时才去删除 Session。当关闭浏览器时，浏览器不会主动在关闭之前通知服务器它将要关闭，所以服务器根本不会有机会知道浏览器已经关闭。</p></blockquote><blockquote><p>由于关闭浏览器不会导致 Session 被删除，这就需要服务器为 Session 设置一个失效时间，当距离客户端上一次使用 Session 的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才会把 Session 删除以节省存储空间。</p></blockquote><p>Reference：<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1665">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46#/detail/pc?id=1665</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;静态网页和动态网页&quot;&gt;&lt;a href=&quot;#静态网页和动态网页&quot; class=&quot;headerlink&quot; title=&quot;静态网页和动态网页&quot;&gt;&lt;/a&gt;静态网页和动态网页&lt;/h3&gt;&lt;h5 id=&quot;静态网页&quot;&gt;&lt;a href=&quot;#静态网页&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="HTTP" scheme="http://giyn.work/categories/HTTP/"/>
    
    
    <category term="HTTP" scheme="http://giyn.work/tags/HTTP/"/>
    
    <category term="Session" scheme="http://giyn.work/tags/Session/"/>
    
    <category term="Cookies" scheme="http://giyn.work/tags/Cookies/"/>
    
  </entry>
  
</feed>
